var searchIndex = new Map(JSON.parse('[\
["core_where_were_we",{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["users",{"doc":"","t":"CCCCCCFNNNONNONNONNNNCPPGNNNNNNNNNNNCCCCKMMFFNNNNNNNNNONNNNNNNNNNNNONNNNOONONNNNNNNNNNNFNNNNNNNNNNNNNONNNNNNCFNNONNNNNNNNNCCFNNNNNNNNNNOKM","n":["dtos","errors","models","repository","use_case","user_dto","UserDto","borrow","borrow_mut","deserialize","email","from","from","id","into","into_shared","name","serialize","try_from","try_into","type_id","errors","InvalidUUID","UsernameError","UsersError","borrow","borrow_mut","fmt","fmt","from","into","into_shared","to_string","try_from","try_into","type_id","repository","user","user_id","user_repository","UserRepository","find_by_id","save","User","Username","add_partner","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","email","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","id","into","into","into_shared","into_shared","name","name","new","partners","remove_partner","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","type_id","type_id","update_name","UserId","borrow","borrow_mut","clone","clone_into","create","eq","equivalent","equivalent","equivalent","fmt","from","generate","hash","id","into","into_shared","to_owned","try_from","try_into","type_id","user_repository","UserRepositoyConcrete","borrow","borrow_mut","client","find_by_id","from","into","into_shared","new","save","try_from","try_into","type_id","create_user_use_case","user_use_cases","CreateUserUseCaseInteractor","borrow","borrow_mut","create","from","into","into_shared","new","try_from","try_into","type_id","user_repository","CreateUserUseCase","create"],"q":[[0,"users"],[5,"users::dtos"],[6,"users::dtos::user_dto"],[21,"users::errors"],[22,"users::errors::errors"],[36,"users::models"],[39,"users::models::repository"],[40,"users::models::repository::user_repository"],[43,"users::models::user"],[87,"users::models::user_id"],[108,"users::repository"],[109,"users::repository::user_repository"],[122,"users::use_case"],[124,"users::use_case::create_user_use_case"],[136,"users::use_case::user_use_cases"],[138,"core::result"],[139,"serde::de"],[140,"serde::ser"],[141,"core::any"],[142,"core::fmt"],[143,"core::fmt"],[144,"core::option"],[145,"anyhow"],[146,"alloc::vec"],[147,"core::hash"],[148,"aws_sdk_dynamodb::client"]],"d":["","","","","","","User DTO","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","user’s model","The User ID","","","","","","Username must be grater than 0 and less than equal 255.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","User ID","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Username","","","the partners if there is no partners, this value will be …","","","","","","","","","","","","User ID consists of an ID only that is UUID","","","","","The argument is user ID that must be UUID. If you don’t …","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","create a new user","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,7,7,0,7,7,7,7,7,7,7,7,7,7,7,0,0,0,0,0,11,11,0,0,4,4,16,4,16,4,16,4,16,4,4,16,4,4,4,16,16,16,4,16,4,16,4,4,16,4,16,4,16,4,4,4,4,16,4,16,16,4,16,4,16,4,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,21,21,21,21,21,21,21,21,21,21,21,21,0,0,0,23,23,23,23,23,23,23,23,23,23,23,0,24],"f":"```````{ce{}{}}0{c{{d{b}}}f}`{hb}{cc{}}`33`{{bc}dj}{c{{d{e}}}{}{}}0{cl{}}````66{{nA`}Ab}0477{cAd{}}332`````{{AfAh}{{Al{{Aj{h}}}}}}{{Afh}{{Al{An}}}}``{{hAh}An};;;;{hh}{B`B`}{{ce}An{}{}}0`{{hh}Bb}{{B`B`}Bb}{{ce}Bb{}{}}00000{{hA`}Ab}{{B`A`}Ab}{cc{}}0`{ce{}{}}000``{{AhB`Bd{Aj{{Bf{Ah}}}}}h}`;11{c{{d{e}}}{}{}}0{Bd{{d{B`n}}}}11{cl{}}0{{hB`}An}`55{AhAh}={Bd{{d{Ahn}}}}{{AhAh}Bb}<<<{{AhA`}Ab}:{{}Ah}{{Ahc}AnBh}`;;;997``;;`{{BjAh}{{Al{{Aj{h}}}}}}=<<{{{Aj{Bl}}}Bj}{{Bjh}{{Al{An}}}}<<:```>>{{{Bn{c}}BdBd}{{d{bn}}}Af}{cc{}}{ce{}{}}0{c{{Bn{c}}}{}}{c{{d{e}}}{}{}}0?``{{C`BdBd}{{d{bn}}}}","c":[],"p":[[5,"UserDto",6],[6,"Result",138],[10,"Deserializer",139],[5,"User",43],[10,"Serializer",140],[5,"TypeId",141],[6,"UsersError",22],[5,"Formatter",142],[8,"Result",142],[5,"String",143],[10,"UserRepository",40],[5,"UserId",87],[6,"Option",144],[8,"Result",145],[1,"unit"],[5,"Username",43],[1,"bool"],[1,"str"],[5,"Vec",146],[10,"Hasher",147],[5,"UserRepositoyConcrete",109],[5,"Client",148],[5,"CreateUserUseCaseInteractor",124],[10,"CreateUserUseCase",136]],"b":[[27,"impl-Debug-for-UsersError"],[28,"impl-Display-for-UsersError"]]}],\
["utils",{"doc":"","t":"CCCCHCH","n":["infrastructure","settings","db","dynamo_db_client","dynamodb_client","settings","table_name"],"q":[[0,"utils"],[2,"utils::infrastructure"],[3,"utils::infrastructure::db"],[4,"utils::infrastructure::db::dynamo_db_client"],[5,"utils::settings"],[6,"utils::settings::settings"],[7,"aws_sdk_dynamodb::client"]],"d":["","","","","","read environment values the following value are constant …","read a table name from the environment value"],"i":[0,0,0,0,0,0,0],"f":"````{{}b}`{{}d}","c":[],"p":[[5,"Client",7],[1,"str"]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
