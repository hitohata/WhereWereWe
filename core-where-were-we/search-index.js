var searchIndex = new Map(JSON.parse('[\
["core_where_were_we",{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["test_utils",{"doc":"","t":"CCCFNNNONNHNNNNNONNN","n":["infrastructure","db","dynamo_db_client","TestDynamoTable","borrow","borrow_mut","client","client","default","delete_table","dynamodb_test_client","from","generate_test_table","into","into_shared","table_name","table_name","try_from","try_into","type_id"],"q":[[0,"test_utils"],[1,"test_utils::infrastructure"],[2,"test_utils::infrastructure::db"],[3,"test_utils::infrastructure::db::dynamo_db_client"],[20,"aws_sdk_dynamodb::client"],[21,"alloc::string"],[22,"core::result"],[23,"core::any"]],"d":["","","","The table struct for the test.","","","","","","remove a table","The DynamoDB user client for the test.","Returns the argument unchanged.","This function is used for the test.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1],"f":"````{ce{}{}}0{bd}`{fb}{bh}{{}d}{cc{}}255{bj}`{c{{l{e}}}{}{}}0{cn{}}","c":[],"p":[[5,"TestDynamoTable",3],[5,"Client",20],[1,"str"],[1,"unit"],[5,"String",21],[6,"Result",22],[5,"TypeId",23]],"b":[]}],\
["travel",{"doc":"","t":"CCCCCPPGNNNNNNNNNNNCCCCKMMMMCCCCFNNNNNONONONNNNNNONNNNONNNNNNNHHFNNNNONNNNOOONNNOCCFNNNNNNNNNNNNNONNNNNNFNNNNNNNNNNNNNONNNNNNCCCFNNNNNNNNNNNONONNNNNONONNNCCFNNNNNNNNNNNNNONNNNNNNFNNNNNNNNNNNONNNNNNNCFNNOHHNNNNNNNNNONNNCSSKFNNONNNNMNMNNNONNN","n":["errors","models","repository","service","errors","DBError","DomainError","TravelError","borrow","borrow_mut","fmt","fmt","from","into","into_shared","to_string","try_from","try_into","type_id","repository","todo","travel","todo_repository","TodoRepository","find_todo_by_id","find_todo_group_by_id","save_todo","save_todo_group","entity","id","todo","todo_group","Todo","borrow","borrow_mut","clone","clone_into","description","description","done","done","due_date","due_date","eq","equivalent","equivalent","equivalent","fmt","from","id","into","into_shared","new","summary","summary","to_owned","todo_id","toggle_todo","try_from","try_into","type_id","update","validate_description","validate_summary","TodoListGroup","add_todo","borrow","borrow_mut","from","group_name","into","into_shared","new","remove_todo","todo","todo_group_id","travel_id","try_from","try_into","type_id","tz","todo_id","todo_list_group_id","TodoId","as_out","borrow","borrow_mut","clone","clone_into","eq","equivalent","equivalent","equivalent","fmt","from","from","id","id","into","into_shared","to_owned","try_from","try_into","type_id","TodoListGroupId","as_out","borrow","borrow_mut","clone","clone_into","eq","equivalent","equivalent","equivalent","fmt","from","from","id","id","into","into_shared","to_owned","try_from","try_into","type_id","entity","id","travel","Travel","add_traveler","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_shared","involve_user","involved_users","involved_users","name","name","new","preclude_user","remove_traveler","to_owned","travel_id","travel_id","travelers","travelers","try_from","try_into","type_id","travel_id","user_id","TravelId","borrow","borrow_mut","clone","clone_into","eq","equivalent","equivalent","equivalent","fmt","from","generate","hash","id","id","into","into_shared","to_owned","try_from","try_from","try_into","type_id","UserId","borrow","borrow_mut","clone","clone_into","eq","equivalent","equivalent","equivalent","fmt","from","hash","id","into","into_shared","to_owned","try_from","try_from","try_into","type_id","todo_repository","TodoRepositoryConcrete","borrow","borrow_mut","client","convert_hashmap_into_option_string","convert_into_todo","default","find_todo_by_id","find_todo_group_by_id","fmt","from","into","into_shared","save_todo","save_todo_group","table_name","try_from","try_into","type_id","todo_id_service","TODO_KEY","TODO_LIST_GROUP_KEY","TodoIdService","TodoIdServiceConcrete","borrow","borrow_mut","client","count_up","default","from","get_count","get_todo_id","get_todo_id","get_todo_list_group_id","get_todo_list_group_id","into","into_shared","table_name","try_from","try_into","type_id"],"q":[[0,"travel"],[4,"travel::errors"],[5,"travel::errors::errors"],[19,"travel::models"],[22,"travel::models::repository"],[23,"travel::models::repository::todo_repository"],[28,"travel::models::todo"],[30,"travel::models::todo::entity"],[32,"travel::models::todo::entity::todo"],[64,"travel::models::todo::entity::todo_group"],[81,"travel::models::todo::id"],[83,"travel::models::todo::id::todo_id"],[104,"travel::models::todo::id::todo_list_group_id"],[125,"travel::models::travel"],[127,"travel::models::travel::entity"],[128,"travel::models::travel::entity::travel"],[154,"travel::models::travel::id"],[156,"travel::models::travel::id::travel_id"],[178,"travel::models::travel::id::user_id"],[198,"travel::repository"],[199,"travel::repository::todo_repository"],[218,"travel::service"],[219,"travel::service::todo_id_service"],[240,"core::fmt"],[241,"core::fmt"],[242,"core::result"],[243,"core::any"],[244,"core::option"],[245,"alloc::vec"],[246,"outref"],[247,"core::hash"],[248,"aws_sdk_dynamodb::types::_attribute_value"],[249,"std::collections::hash::map"]],"d":["","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","The repository trait of the todo","","","","","","","","to do struct","This is the collection of the to do list","","","","","","","This value must be grater than 0 and less than equal 500.","","This is false by default.","","due date. this is time stamp","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","The done is false by default.","","This value must be grater than 0 and less than equal 200.","","","","","","","update the summary and the description","","The summary length must be grater than 0 and less than 200.","","add a new to do to this collection","","","Returns the argument unchanged.","this to-do group name","Calls <code>U::from(self)</code>.","","","remove a to-do from this collection","The collection of the to-do rest","to-do group ID","travel ID","","","","time offset from the UTC","todo ID This is auto increment number","todo list group ID This is auto increment number","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","travel struct","","add a traveler into this travel","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","involve a user into this travel","","Same as the travelers, this is also HashSet","","the length must be grater than 0 and less than equal 255.","the travelers and the involved users can be None.","preclude an involved user from this travel","remove a traveler from this travelðŸ˜¢","","","","","Travelers are HashSet since the value cannot be â€¦","","","","Travel ID","userâ€™s ID This is reference only,","travel ID","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","The argument is user ID that must be UUID. If you donâ€™t â€¦","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","This is implementation of the to do repository.","","","","","Convert the DynamoDB result hashmap into Option string","Convert the item (HashMap) into the To do struct","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","Getting id service Return a number that latest ID + 1","","","","","","","","update the counter saving the latest ID","","Returns the argument unchanged.","This function gets the latest ID The return ID has already â€¦","Get the latest + 1 to do list ID if there is no data in â€¦","","Get the latest + 1 to do list ID if there is no data in â€¦","","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,7,7,7,7,0,0,0,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,0,0,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,0,0,0,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,0,0,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,0,0,28,28,28,0,0,28,28,28,28,28,28,28,28,28,28,28,28,28,0,0,0,0,0,29,29,29,29,29,29,29,30,29,30,29,29,29,29,29,29,29],"f":"````````{ce{}{}}0{{bd}f}0{cc{}}22{ch{}}{c{{j{e}}}{}{}}0{cl{}}`````{{nA`AbAd}{{j{{Ah{Af}}b}}}}{{nA`Ab}{{j{{Ah{Aj}}b}}}}{{nA`AbAf}{{j{Alb}}}}{{nAj}{{j{Alb}}}}`````99{AfAf}{{ce}Al{}{}}{Af{{Ah{An}}}}`{AfB`}`{Af{{Ah{Bb}}}}`{{AfAf}B`}{{ce}B`{}{}}00{{Afd}f}?`{ce{}{}}0{{AdAn{Ah{An}}{Ah{Bb}}{Ah{B`}}}{{j{Afb}}}}{AfAn}`2{AfAd}{AfAl}{c{{j{e}}}{}{}}0{cl{}}{{AfAn{Ah{An}}}{{j{Alb}}}}{{{Ah{An}}}{{j{Alb}}}}{An{{j{Alb}}}}`{{AjAf}Al}::{cc{}}`;;{{A`AbAn{Bd{Af}}{Ah{Bf}}}Aj}{{AjAd}Al}```887````{c{{Bh{e}}}{}{}}>>{AdAd}{{ce}Al{}{}}{{AdAd}B`}{{ce}B`{}{}}00{{Add}f}{BjAd}9{AdBj}`{ce{}{}}00{c{{j{e}}}{}{}}0{cl{}}`:22{AbAb}9{{AbAb}B`}888{{Abd}f}{cc{}}{BjAb}{AbBj}`888776````{{BlBn}Al}99{BlBl}{{ce}Al{}{}}{{Bld}f}6<<3{Bl{{Bd{Bn}}}}`{BlAn}`{{A`An{C`{Bn}}{Ah{{C`{Bn}}}}}{{j{Blb}}}}6{{BlBn}{{j{Alb}}}}{ce{}{}}{BlA`}`5`{c{{j{e}}}{}{}}0{cl{}}```33{A`A`}:{{A`A`}B`}{{ce}B`{}{}}00{{A`d}f}{cc{}}{{}A`}{{A`c}AlCb}{A`An}`;;;{An{{j{A`b}}}}::9`<<{BnBn}{{ce}Al{}{}}{{BnBn}B`}999{{Bnd}f}8{{Bnc}AlCb}`{ce{}{}}00{c{{j{e}}}{}{}}{An{{j{Bnb}}}}1{cl{}}``33`{{{Cf{hCd}}An}{{j{{Ah{h}}b}}}}{{{Cf{hCd}}}{{j{Afb}}}}{{}Ch}{{ChA`AbAd}{{j{{Ah{Af}}b}}}}{{ChA`Ab}{{j{{Ah{Aj}}b}}}}{{Chd}f}{cc{}}::{{ChA`AbAf}{{j{Alb}}}}{{ChAj}{{j{Alb}}}}`;;9`````<<`{{CjA`AnBj}{{j{Alb}}}}{{}Cj}4{{CjA`An}{{j{Bjb}}}}{{ClA`Ab}{{j{Bjb}}}}{{CjA`Ab}{{j{Bjb}}}}{{ClA`}{{j{Bjb}}}}{{CjA`}{{j{Bjb}}}}{ce{}{}}0`{c{{j{e}}}{}{}}0{cl{}}","c":[],"p":[[6,"TravelError",5],[5,"Formatter",240],[8,"Result",240],[5,"String",241],[6,"Result",242],[5,"TypeId",243],[10,"TodoRepository",23],[5,"TravelId",156],[5,"TodoListGroupId",104],[5,"TodoId",83],[5,"Todo",32],[6,"Option",244],[5,"TodoListGroup",64],[1,"unit"],[1,"str"],[1,"bool"],[1,"i64"],[5,"Vec",245],[1,"i32"],[5,"Out",246],[1,"u32"],[5,"Travel",128],[5,"UserId",178],[1,"slice"],[10,"Hasher",247],[6,"AttributeValue",248],[5,"HashMap",249],[5,"TodoRepositoryConcrete",199],[5,"TodoIdServiceConcrete",219],[10,"TodoIdService",219]],"b":[[10,"impl-Display-for-TravelError"],[11,"impl-Debug-for-TravelError"]]}],\
["users",{"doc":"","t":"CCCCCCFNNNONNONNNNNOONNNNNCPPPPPPGPNNNNNNNNNNNNNNNNNCCCCFFKOCCNNNNNNNNNNMNONNNNNNNNNNNNNNMNONNNNNNNNCCPFPFPPPGPPPPPGPPNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNONONNONNNNNNNNNNNNNNNNNNNNNNNNPFPFPPPGPPPPPGPPNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNONONNONNNNNNNNNNNNNNNNNNNNNNNNFFNNNNNNNNNONNNNNNNNNNNNONNNNNNNNNNOONONNNNNNNNNNNNNFNNNNNNNNNNNNNONNNNNNNNNNNCFNNONNNNNNNNNNONNNNCCFNNNNNNNNNNNNNHNNNNOKMMMM","n":["dtos","errors","models","repository","use_case","user_dto","UserDto","borrow","borrow_mut","deserialize","email","from","from","id","into","into_any","into_any_arc","into_any_rc","into_shared","name","partners","serialize","try_from","try_into","type_id","type_name","errors","Connection","DBError","DomainError","InvalidUUID","UserNotFind","UsernameError","UsersError","UsersUseCaseError","borrow","borrow_mut","fmt","fmt","from","from","into","into_any","into_any_arc","into_any_rc","into_shared","source","to_string","try_from","try_into","type_id","type_name","repository","user","user_id","user_repository","MockUserRepository","MockUserRepository_UserRepository","UserRepository","UserRepository_expectations","__mock_MockUserRepository","__mock_MockUserRepository_UserRepository","borrow","borrow","borrow_mut","borrow_mut","checkpoint","checkpoint","default","default","expect_find_by_id","expect_save","find_by_id","find_by_id","find_by_id","fmt","from","from","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_shared","into_shared","new","save","save","save","try_from","try_from","try_into","try_into","type_id","type_id","type_name","type_name","__find_by_id","__save","Always","Common","Default","Expectation","Expired","Func","FuncSt","Matcher","Mut","MutSt","Once","OnceSt","Pred","Rfunc","_Phantom","_Phantom","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_mut","common","default","default","default","default","drop","fmt","from","from","from","from","in_sequence","in_sequence","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_shared","into_shared","into_shared","into_shared","is_done","is_done","matcher","matches","matches","matches","never","never","new","once","return_const","return_const_st","return_once","return_once_st","returning","returning_st","rfunc","satisfy_sequence","seq_handle","times","times","times","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_name","type_name","type_name","type_name","verify_sequence","with","with","withf","withf","withf_st","withf_st","Always","Common","Default","Expectation","Expired","Func","FuncSt","Matcher","Mut","MutSt","Once","OnceSt","Pred","Rfunc","_Phantom","_Phantom","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_mut","common","default","default","default","default","drop","fmt","from","from","from","from","in_sequence","in_sequence","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_shared","into_shared","into_shared","into_shared","is_done","is_done","matcher","matches","matches","matches","never","never","new","once","return_const","return_const_st","return_once","return_once_st","returning","returning_st","rfunc","satisfy_sequence","seq_handle","times","times","times","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_name","type_name","type_name","type_name","verify_sequence","with","with","withf","withf","withf_st","withf_st","User","Username","add_partner","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","email","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","id","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_shared","into_shared","name","name","new","partners","remove_partner","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","type_id","type_id","type_name","type_name","update_name","UserId","borrow","borrow_mut","clone","clone_into","eq","equivalent","equivalent","equivalent","fmt","from","generate","hash","id","id","into","into_any","into_any_arc","into_any_rc","into_shared","to_owned","try_from","try_from","try_into","type_id","type_name","user_repository","UserRepositoryConcrete","borrow","borrow_mut","client","default","find_by_id","fmt","from","into","into_any","into_any_arc","into_any_rc","into_shared","save","table_name","try_from","try_into","type_id","type_name","user_use_case_implementation","user_use_cases","CreateUserUseCaseInteractor","add_partner","borrow","borrow_mut","change_name","create","from","into","into_any","into_any_arc","into_any_rc","into_shared","new","remove_partner","to_user_id_struct","try_from","try_into","type_id","type_name","user_repository","UserUseCases","add_partner","change_name","create","remove_partner"],"q":[[0,"users"],[5,"users::dtos"],[6,"users::dtos::user_dto"],[26,"users::errors"],[27,"users::errors::errors"],[52,"users::models"],[55,"users::models::repository"],[56,"users::models::repository::user_repository"],[100,"users::models::repository::user_repository::__mock_MockUserRepository_UserRepository"],[102,"users::models::repository::user_repository::__mock_MockUserRepository_UserRepository::__find_by_id"],[205,"users::models::repository::user_repository::__mock_MockUserRepository_UserRepository::__save"],[308,"users::models::user"],[360,"users::models::user_id"],[386,"users::repository"],[387,"users::repository::user_repository"],[406,"users::use_case"],[408,"users::use_case::user_use_case_implementation"],[428,"users::use_case::user_use_cases"],[433,"core::result"],[434,"serde::de"],[435,"alloc::boxed"],[436,"core::any"],[437,"alloc::sync"],[438,"alloc::rc"],[439,"serde::ser"],[440,"core::any"],[441,"core::fmt"],[442,"core::error"],[443,"core::option"],[444,"alloc::string"],[445,"core::fmt"],[446,"core::clone"],[447,"core::convert"],[448,"core::marker"],[449,"core::ops::function"],[450,"core::ops::function"],[451,"core::ops::function"],[452,"core::hash"]],"d":["","","","","","","User DTO","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","userâ€™s model","The User ID","","","","","","","","","","","","Validate that all current expectations for all methods have","Validate that all current expectations for all methods have","","","Create an <code>Expectation</code> for mocking the <code>find_by_id</code> method","Create an <code>Expectation</code> for mocking the <code>save</code> method","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Create a new mock object with no expectations.","","","","","","","","","","","","","","","Holds the stuff that is independent of the output type","","Expectation type for methods that return a <code>&#39;static</code> type. â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Add this expectation to a <code>Sequence</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Validate this expectationâ€™s matcher.","Forbid this expectation from ever being called.","Forbid this expectation from ever being called.","Create a new, default, <code>Expectation</code>","Expect this expectation to be called exactly once.  â€¦","Return a constant value from the <code>Expectation</code>","Single-threaded version of <code>return_const</code>.  This is useful â€¦","Supply an <code>FnOnce</code> closure that will provide the return â€¦","Single-threaded version of <code>return_once</code>.  This is useful for","Supply a closure that will provide the return value for â€¦","Single-threaded version of <code>returning</code>. Can be used when the â€¦","","","","Expect this expectation to be called any number of times â€¦","Restrict the number of times that that this method may be â€¦","","","","","","","","","","","","","","","","","","","","","Set matching criteria for this Expectation.","","Set a matching function for this Expectation.","","Single-threaded version of <code>withf</code>. Can be used when the â€¦","","Holds the stuff that is independent of the output type","","Expectation type for methods that return a <code>&#39;static</code> type. â€¦","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Add this expectation to a <code>Sequence</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Validate this expectationâ€™s matcher.","Forbid this expectation from ever being called.","Forbid this expectation from ever being called.","Create a new, default, <code>Expectation</code>","Expect this expectation to be called exactly once.  â€¦","Return a constant value from the <code>Expectation</code>","Single-threaded version of <code>return_const</code>.  This is useful â€¦","Supply an <code>FnOnce</code> closure that will provide the return â€¦","Single-threaded version of <code>return_once</code>.  This is useful for","Supply a closure that will provide the return value for â€¦","Single-threaded version of <code>returning</code>. Can be used when the â€¦","","","","Expect this expectation to be called any number of times â€¦","Restrict the number of times that that this method may be â€¦","","","","","","","","","","","","","","","","","","","","","Set matching criteria for this Expectation.","","Set a matching function for this Expectation.","","Single-threaded version of <code>withf</code>. Can be used when the â€¦","","Username must be grater than 0 and less than equal 255.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","User ID","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Username","","","the partners if there is no partners, this value will be â€¦","","","","","","","","","","","","","","User ID consists of an ID only that is UUID","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","The argument is user ID that must be UUID. If you donâ€™t â€¦","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","create a new user","","","Add a new partner The partner is added to the user. The â€¦","","","update a userâ€™s name","create a new user","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Remove a new partner The partner is removed from the user. â€¦","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,12,12,12,12,12,12,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,0,0,0,0,0,19,0,0,19,21,19,21,19,21,19,21,19,19,24,19,21,19,19,21,19,21,19,21,19,21,19,21,19,21,19,24,19,21,19,21,19,21,19,21,19,21,0,0,29,0,28,0,28,29,29,0,28,28,28,28,29,0,28,29,28,29,27,22,28,29,27,22,27,28,22,28,29,27,22,27,29,28,29,27,22,27,22,28,29,27,22,28,29,27,22,27,22,28,29,27,22,28,29,27,22,27,22,27,29,27,22,27,22,22,22,22,22,22,22,22,22,22,27,27,27,22,27,29,28,29,27,22,28,29,27,22,28,29,27,22,28,29,27,22,27,27,22,27,22,27,22,43,0,42,0,42,43,43,0,42,42,42,42,43,0,42,43,42,43,41,23,42,43,41,23,41,42,23,42,43,41,23,41,43,42,43,41,23,41,23,42,43,41,23,42,43,41,23,41,23,42,43,41,23,42,43,41,23,41,23,41,43,41,23,41,23,23,23,23,23,23,23,23,23,23,41,41,41,23,41,43,42,43,41,23,42,43,41,23,42,43,41,23,42,43,41,23,41,41,23,41,23,41,23,0,0,4,4,44,4,44,4,44,4,44,4,4,44,4,4,4,44,44,44,4,44,4,44,4,4,44,4,44,4,44,4,44,4,44,4,44,4,4,4,4,44,4,44,44,4,44,4,44,4,44,4,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,0,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,0,0,0,48,48,48,48,48,48,48,48,48,48,48,48,48,0,48,48,48,48,48,0,50,50,50,50],"f":"```````{ce{}{}}0{c{{d{b}}}f}`{cc{}}{hb}`3{{{j{c}}}{{j{l}}}{}}{{{n{c}}}{{n{l}}}{}}{{{A`{c}}}{{A`{l}}}{}}6``{{bc}dAb}{c{{d{e}}}{}{}}0{cAd{}}{cAf{}}`````````::{{AhAj}Al}0{AnAh}:<876<{Ah{{Bb{B`}}}}{cBd{}}6654``````````>>>>{BfBh}{BjBh}{{}Bf}{{}Bj}{BfBl}{BfBn}{{C`Cb}{{d{{Bb{h}}Ah}}}}{{BfCb}{{d{{Bb{h}}Ah}}}}`{{BfAj}{{d{BhCd}}}}{cc{}}0{ce{}{}}0{{{j{c}}}{{j{l}}}{}}0{{{n{c}}}{{n{l}}}{}}0{{{A`{c}}}{{A`{l}}}{}}033;{{C`h}{{d{BhAh}}}}{{Bfh}{{d{BhAh}}}}`{c{{d{e}}}{}{}}000{cAd{}}0{cAf{}}0``````````````````88888888{{CfAf}Bh}{{ChCb}{{d{{d{{Bb{h}}Ah}}Af}}}}`{{}Ch}{{}Cj}{{}Cf}{{}Bl}{CfBh}{{CjAj}Al}{cc{}}000{{CfCl}Cf}{{BlCl}Bl}{ce{}{}}000{{{j{c}}}{{j{l}}}{}}000{{{n{c}}}{{n{l}}}{}}0{{{A`{c}}}{{A`{l}}}{}}0003333{CfCn}{BlCn}`{{CjCb}Cn}{{CfCb}Cn}{{BlCb}Cn}={BlBl}?0{{Blc}Bl{D`{Db{{d{{Bb{h}}Ah}}}}Dd}}{{Blc}Bl{D`{Db{{d{{Bb{h}}Ah}}}}}}{{Blc}Bl{{Dh{Cb}{{Df{{d{{Bb{h}}Ah}}}}}}Dd}}{{Blc}Bl{{Dh{Cb}{{Df{{d{{Bb{h}}Ah}}}}}}}}{{Blc}Bl{{Dj{Cb}{{Df{{d{{Bb{h}}Ah}}}}}}Dd}}{{Blc}Bl{{Dj{Cb}{{Df{{d{{Bb{h}}Ah}}}}}}}}`{CfBh}`{{Cfc}Bh{{Db{Dl}}}}{{Blc}Bl{{Db{Dl}}}}`{cBd{}}{c{{d{e}}}{}{}}0000000{cAd{}}000{cAf{}}000{{CfAf}Bh}{{Cfc}Bh{{Dn{Cb}}Dd}}{{Blc}Bl{{Dn{Cb}}Dd}}{{Cfc}Bh{{E`{Cb}{{Df{Cn}}}}Dd}}{{Blc}Bl{{E`{Cb}{{Df{Cn}}}}Dd}}{{Cfc}Bh{{E`{Cb}{{Df{Cn}}}}}}{{Blc}Bl{{E`{Cb}{{Df{Cn}}}}}}````````````````{ce{}{}}0000000{{EbAf}Bh}{{Edh}{{d{{d{BhAh}}Af}}}}`{{}Ed}{{}Ef}{{}Eb}{{}Bn}{EbBh}{{EfAj}Al}{cc{}}000{{EbCl}Eb}{{BnCl}Bn};;;;{{{j{c}}}{{j{l}}}{}}000{{{n{c}}}{{n{l}}}{}}0{{{A`{c}}}{{A`{l}}}{}}000>>>>{EbCn}{BnCn}`{{Efh}Cn}{{Ebh}Cn}{{Bnh}Cn}<{BnBn}>0{{Bnc}Bn{D`{Db{{d{BhAh}}}}Dd}}{{Bnc}Bn{D`{Db{{d{BhAh}}}}}}{{Bnc}Bn{{Dh{h}{{Df{{d{BhAh}}}}}}Dd}}{{Bnc}Bn{{Dh{h}{{Df{{d{BhAh}}}}}}}}{{Bnc}Bn{{Dj{h}{{Df{{d{BhAh}}}}}}Dd}}{{Bnc}Bn{{Dj{h}{{Df{{d{BhAh}}}}}}}}`{EbBh}`{{Ebc}Bh{{Db{Dl}}}}{{Bnc}Bn{{Db{Dl}}}}`{cBd{}}{c{{d{e}}}{}{}}0000000{cAd{}}000{cAf{}}000{{EbAf}Bh}{{Ebc}Bh{{Dn{h}}Dd}}{{Bnc}Bn{{Dn{h}}Dd}}{{Ebc}Bh{{E`{h}{{Df{Cn}}}}Dd}}{{Bnc}Bn{{E`{h}{{Df{Cn}}}}Dd}}{{Ebc}Bh{{E`{h}{{Df{Cn}}}}}}{{Bnc}Bn{{E`{h}{{Df{Cn}}}}}}``{{hCb}Bh}{ce{}{}}000{hh}{EhEh}{{ce}Bh{}{}}0`{{hh}Cn}{{EhEh}Cn}{{ce}Cn{}{}}00000{{hAj}Al}{{EhAj}Al}{cc{}}0`99{{{j{c}}}{{j{l}}}{}}0{{{n{c}}}{{n{l}}}{}}0{{{A`{c}}}{{A`{l}}}{}}0<<``{{CbEhAf{Bb{{Ej{Cb}}}}}h}`>=={c{{d{e}}}{}{}}{Af{{d{EhAh}}}}111{cAd{}}0{cAf{}}0{{hEh}Bh}`{ce{}{}}0{CbCb}{{ce}Bh{}{}}{{CbCb}Cn}{{ce}Cn{}{}}00{{CbAj}Al}?{{}Cb}{{Cbc}BhEl}{CbAf}`8{{{j{c}}}{{j{l}}}{}}{{{n{c}}}{{n{l}}}{}}{{{A`{c}}}{{A`{l}}}{}};;{Af{{d{CbAh}}}}{c{{d{e}}}{}{}}0{cAd{}}{cAf{}}``??`{{}En}{{EnCb}{{d{{Bb{h}}Ah}}}}{{EnAj}Al}{cc{}}{ce{}{}};:90{{Enh}{{d{BhAh}}}}`8876```{{{F`{c}}AfAf}{{d{bAh}}}C`}220032=<;2{c{{F`{c}}}{}}1{{AfAf}{{d{{Fb{CbCb}}Ah}}}};;:9``{{FdAfAf}{{d{bAh}}}}000","c":[],"p":[[5,"UserDto",6],[6,"Result",433],[10,"Deserializer",434],[5,"User",308],[5,"Box",435],[10,"Any",436],[5,"Arc",437],[5,"Rc",438],[10,"Serializer",439],[5,"TypeId",436],[1,"str"],[6,"UsersError",27],[5,"Formatter",440],[8,"Result",440],[6,"Error",441],[10,"Error",442],[6,"Option",443],[5,"String",444],[5,"MockUserRepository",56],[1,"unit"],[5,"MockUserRepository_UserRepository",56],[5,"Expectation",102],[5,"Expectation",205],[10,"UserRepository",56],[5,"UserId",360],[5,"Error",440],[5,"Common",102],[6,"Rfunc",102],[6,"Matcher",102],[5,"Sequence",445],[1,"bool"],[10,"Clone",446],[10,"Into",447],[10,"Send",448],[17,"Output"],[10,"FnOnce",449],[10,"FnMut",449],[5,"TimesRange",445],[10,"Predicate",450],[10,"Fn",449],[5,"Common",205],[6,"Rfunc",205],[6,"Matcher",205],[5,"Username",308],[5,"Vec",451],[10,"Hasher",452],[5,"UserRepositoryConcrete",387],[5,"CreateUserUseCaseInteractor",408],[1,"tuple"],[10,"UserUseCases",428]],"b":[[37,"impl-Debug-for-UsersError"],[38,"impl-Display-for-UsersError"]]}],\
["utils",{"doc":"","t":"CCCCHCHH","n":["infrastructure","settings","db","dynamo_db_client","dynamodb_client","settings","dynamo_endpoint","table_name"],"q":[[0,"utils"],[2,"utils::infrastructure"],[3,"utils::infrastructure::db"],[4,"utils::infrastructure::db::dynamo_db_client"],[5,"utils::settings"],[6,"utils::settings::settings"],[8,"aws_sdk_dynamodb::client"]],"d":["","","","","","read environment values the following value are constant â€¦","read a table name from the environment value This is used â€¦","read a table name from the environment value"],"i":[0,0,0,0,0,0,0,0],"f":"````{{}b}`{{}d}0","c":[],"p":[[5,"Client",8],[1,"str"]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
