var searchIndex = new Map(JSON.parse('[\
["core_where_were_we",{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["test_utils",{"doc":"","t":"CCCFNNONNHNNNNONNN","n":["infrastructure","db","dynamo_db_client","TestDynamoTable","borrow","borrow_mut","client","default","delete_table","dynamodb_test_client","from","generate_test_table","into","into_shared","table_name","try_from","try_into","type_id"],"q":[[0,"test_utils"],[1,"test_utils::infrastructure"],[2,"test_utils::infrastructure::db"],[3,"test_utils::infrastructure::db::dynamo_db_client"],[18,"aws_sdk_dynamodb::client"],[19,"core::result"],[20,"core::any"]],"d":["","","","The table struct for the test.","","","","","remove a table","The DynamoDB user client for the testl.","Returns the argument unchanged.","This function is used for the test.","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,0,0,0,2,2,2,2,2,0,2,2,2,2,2,2,2,2],"f":"````{ce{}{}}0`{bd}{df}{{}h}{cc{}}244`{c{{j{e}}}{}{}}0{cl{}}","c":[],"p":[[1,"str"],[5,"TestDynamoTable",3],[1,"unit"],[5,"Client",18],[6,"Result",19],[5,"TypeId",20]],"b":[]}],\
["users",{"doc":"","t":"CCCCCCFNNNONNONNNNNOONNNNNCPPPPPGPNNNNNNNNNNNNNNNNNCCCCFFKOCCNNNNNNNNNNMNONNNNNNNNNNNNNNMNONNNNNNNNCCPFPFPPPGPPPPPGPPNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNONONNONNNNNNNNNNNNNNNNNNNNNNNNPFPFPPPGPPPPPGPPNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNONONNONNNNNNNNNNNNNNNNNNNNNNNNFFNNNNNNNNNONNNNNNNNNNNNONNNNNNNNNNOONONNNNNNNNNNNNNFNNNNNNNNNNNNONNNNNNNNNNNCFNNONNNNNNNNNNONNNNCCFNNNNNNNNNNNNNNNOKMM","n":["dtos","errors","models","repository","use_case","user_dto","UserDto","borrow","borrow_mut","deserialize","email","from","from","id","into","into_any","into_any_arc","into_any_rc","into_shared","name","partners","serialize","try_from","try_into","type_id","type_name","errors","Connection","DBError","InvalidUUID","UserNotFind","UsernameError","UsersError","UsersUseCaseError","borrow","borrow_mut","fmt","fmt","from","from","into","into_any","into_any_arc","into_any_rc","into_shared","source","to_string","try_from","try_into","type_id","type_name","repository","user","user_id","user_repository","MockUserRepository","MockUserRepository_UserRepository","UserRepository","UserRepository_expectations","__mock_MockUserRepository","__mock_MockUserRepository_UserRepository","borrow","borrow","borrow_mut","borrow_mut","checkpoint","checkpoint","default","default","expect_find_by_id","expect_save","find_by_id","find_by_id","find_by_id","fmt","from","from","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_shared","into_shared","new","save","save","save","try_from","try_from","try_into","try_into","type_id","type_id","type_name","type_name","__find_by_id","__save","Always","Common","Default","Expectation","Expired","Func","FuncSt","Matcher","Mut","MutSt","Once","OnceSt","Pred","Rfunc","_Phantom","_Phantom","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_mut","common","default","default","default","default","drop","fmt","from","from","from","from","in_sequence","in_sequence","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_shared","into_shared","into_shared","into_shared","is_done","is_done","matcher","matches","matches","matches","never","never","new","once","return_const","return_const_st","return_once","return_once_st","returning","returning_st","rfunc","satisfy_sequence","seq_handle","times","times","times","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_name","type_name","type_name","type_name","verify_sequence","with","with","withf","withf","withf_st","withf_st","Always","Common","Default","Expectation","Expired","Func","FuncSt","Matcher","Mut","MutSt","Once","OnceSt","Pred","Rfunc","_Phantom","_Phantom","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_mut","common","default","default","default","default","drop","fmt","from","from","from","from","in_sequence","in_sequence","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_shared","into_shared","into_shared","into_shared","is_done","is_done","matcher","matches","matches","matches","never","never","new","once","return_const","return_const_st","return_once","return_once_st","returning","returning_st","rfunc","satisfy_sequence","seq_handle","times","times","times","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_name","type_name","type_name","type_name","verify_sequence","with","with","withf","withf","withf_st","withf_st","User","Username","add_partner","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","email","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","id","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_shared","into_shared","name","name","new","partners","remove_partner","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","type_id","type_id","type_name","type_name","update_name","UserId","borrow","borrow_mut","clone","clone_into","eq","equivalent","equivalent","equivalent","fmt","from","generate","hash","id","into","into_any","into_any_arc","into_any_rc","into_shared","to_owned","try_from","try_from","try_into","type_id","type_name","user_repository","UserRepositoryConcrete","borrow","borrow_mut","client","default","find_by_id","fmt","from","into","into_any","into_any_arc","into_any_rc","into_shared","save","table_name","try_from","try_into","type_id","type_name","user_use_case_implementation","user_use_cases","CreateUserUseCaseInteractor","add_partner","borrow","borrow_mut","create","from","into","into_any","into_any_arc","into_any_rc","into_shared","new","try_from","try_into","type_id","type_name","user_repository","UserUseCases","add_partner","create"],"q":[[0,"users"],[5,"users::dtos"],[6,"users::dtos::user_dto"],[26,"users::errors"],[27,"users::errors::errors"],[51,"users::models"],[54,"users::models::repository"],[55,"users::models::repository::user_repository"],[99,"users::models::repository::user_repository::__mock_MockUserRepository_UserRepository"],[101,"users::models::repository::user_repository::__mock_MockUserRepository_UserRepository::__find_by_id"],[204,"users::models::repository::user_repository::__mock_MockUserRepository_UserRepository::__save"],[307,"users::models::user"],[359,"users::models::user_id"],[384,"users::repository"],[385,"users::repository::user_repository"],[404,"users::use_case"],[406,"users::use_case::user_use_case_implementation"],[423,"users::use_case::user_use_cases"],[426,"core::result"],[427,"serde::de"],[428,"alloc::boxed"],[429,"core::any"],[430,"alloc::sync"],[431,"alloc::rc"],[432,"serde::ser"],[433,"core::any"],[434,"core::fmt"],[435,"core::error"],[436,"core::option"],[437,"alloc::string"],[438,"core::fmt"],[439,"core::clone"],[440,"core::convert"],[441,"core::marker"],[442,"core::ops::function"],[443,"core::ops::function"],[444,"core::ops::function"],[445,"core::hash"]],"d":["","","","","","","User DTO","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","user’s model","The User ID","","","","","","","","","","","","Validate that all current expectations for all methods have","Validate that all current expectations for all methods have","","","Create an <code>Expectation</code> for mocking the <code>find_by_id</code> method","Create an <code>Expectation</code> for mocking the <code>save</code> method","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Create a new mock object with no expectations.","","","","","","","","","","","","","","","Holds the stuff that is independent of the output type","","Expectation type for methods that return a <code>&#39;static</code> type. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Add this expectation to a <code>Sequence</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Validate this expectation’s matcher.","Forbid this expectation from ever being called.","Forbid this expectation from ever being called.","Create a new, default, <code>Expectation</code>","Expect this expectation to be called exactly once.  …","Return a constant value from the <code>Expectation</code>","Single-threaded version of <code>return_const</code>.  This is useful …","Supply an <code>FnOnce</code> closure that will provide the return …","Single-threaded version of <code>return_once</code>.  This is useful for","Supply a closure that will provide the return value for …","Single-threaded version of <code>returning</code>. Can be used when the …","","","","Expect this expectation to be called any number of times …","Restrict the number of times that that this method may be …","","","","","","","","","","","","","","","","","","","","","Set matching criteria for this Expectation.","","Set a matching function for this Expectation.","","Single-threaded version of <code>withf</code>. Can be used when the …","","Holds the stuff that is independent of the output type","","Expectation type for methods that return a <code>&#39;static</code> type. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Add this expectation to a <code>Sequence</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Validate this expectation’s matcher.","Forbid this expectation from ever being called.","Forbid this expectation from ever being called.","Create a new, default, <code>Expectation</code>","Expect this expectation to be called exactly once.  …","Return a constant value from the <code>Expectation</code>","Single-threaded version of <code>return_const</code>.  This is useful …","Supply an <code>FnOnce</code> closure that will provide the return …","Single-threaded version of <code>return_once</code>.  This is useful for","Supply a closure that will provide the return value for …","Single-threaded version of <code>returning</code>. Can be used when the …","","","","Expect this expectation to be called any number of times …","Restrict the number of times that that this method may be …","","","","","","","","","","","","","","","","","","","","","Set matching criteria for this Expectation.","","Set a matching function for this Expectation.","","Single-threaded version of <code>withf</code>. Can be used when the …","","Username must be grater than 0 and less than equal 255.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","User ID","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Username","","","the partners if there is no partners, this value will be …","","","","","","","","","","","","","","User ID consists of an ID only that is UUID","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","The argument is user ID that must be UUID. If you don’t …","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","create a new user","","","Add a new partner The partner is added to the user. The …","","","create a new user","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,12,12,12,12,12,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,0,0,0,0,0,19,0,0,19,21,19,21,19,21,19,21,19,19,24,19,21,19,19,21,19,21,19,21,19,21,19,21,19,21,19,24,19,21,19,21,19,21,19,21,19,21,0,0,29,0,28,0,28,29,29,0,28,28,28,28,29,0,28,29,28,29,27,22,28,29,27,22,27,28,22,28,29,27,22,27,29,28,29,27,22,27,22,28,29,27,22,28,29,27,22,27,22,28,29,27,22,28,29,27,22,27,22,27,29,27,22,27,22,22,22,22,22,22,22,22,22,22,27,27,27,22,27,29,28,29,27,22,28,29,27,22,28,29,27,22,28,29,27,22,27,27,22,27,22,27,22,43,0,42,0,42,43,43,0,42,42,42,42,43,0,42,43,42,43,41,23,42,43,41,23,41,42,23,42,43,41,23,41,43,42,43,41,23,41,23,42,43,41,23,42,43,41,23,41,23,42,43,41,23,42,43,41,23,41,23,41,43,41,23,41,23,23,23,23,23,23,23,23,23,23,41,41,41,23,41,43,42,43,41,23,42,43,41,23,42,43,41,23,42,43,41,23,41,41,23,41,23,41,23,0,0,4,4,44,4,44,4,44,4,44,4,4,44,4,4,4,44,44,44,4,44,4,44,4,4,44,4,44,4,44,4,44,4,44,4,44,4,4,4,4,44,4,44,44,4,44,4,44,4,44,4,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,0,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,0,0,0,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,0,49,49],"f":"```````{ce{}{}}0{c{{d{b}}}f}`{hb}{cc{}}`3{{{j{c}}}{{j{l}}}{}}{{{n{c}}}{{n{l}}}{}}{{{A`{c}}}{{A`{l}}}{}}6``{{bc}dAb}{c{{d{e}}}{}{}}0{cAd{}}{cAf{}}````````::{{AhAj}Al}0{AnAh}9<876<{Ah{{Bb{B`}}}}{cBd{}}6654``````````>>>>{BfBh}{BjBh}{{}Bf}{{}Bj}{BfBl}{BfBn}{{C`Cb}{{d{{Bb{h}}Ah}}}}{{BfCb}{{d{{Bb{h}}Ah}}}}`{{BfAj}{{d{BhCd}}}}{cc{}}0{ce{}{}}0{{{j{c}}}{{j{l}}}{}}0{{{n{c}}}{{n{l}}}{}}0{{{A`{c}}}{{A`{l}}}{}}033;{{C`h}{{d{BhAh}}}}{{Bfh}{{d{BhAh}}}}`{c{{d{e}}}{}{}}000{cAd{}}0{cAf{}}0``````````````````88888888{{CfAf}Bh}{{ChCb}{{d{{d{{Bb{h}}Ah}}Af}}}}`{{}Ch}{{}Cj}{{}Cf}{{}Bl}{CfBh}{{CjAj}Al}{cc{}}000{{CfCl}Cf}{{BlCl}Bl}{ce{}{}}000{{{j{c}}}{{j{l}}}{}}000{{{n{c}}}{{n{l}}}{}}0{{{A`{c}}}{{A`{l}}}{}}0003333{CfCn}{BlCn}`{{CjCb}Cn}{{CfCb}Cn}{{BlCb}Cn}={BlBl}?0{{Blc}Bl{D`{Db{{d{{Bb{h}}Ah}}}}Dd}}{{Blc}Bl{D`{Db{{d{{Bb{h}}Ah}}}}}}{{Blc}Bl{{Dh{Cb}{{Df{{d{{Bb{h}}Ah}}}}}}Dd}}{{Blc}Bl{{Dh{Cb}{{Df{{d{{Bb{h}}Ah}}}}}}}}{{Blc}Bl{{Dj{Cb}{{Df{{d{{Bb{h}}Ah}}}}}}Dd}}{{Blc}Bl{{Dj{Cb}{{Df{{d{{Bb{h}}Ah}}}}}}}}`{CfBh}`{{Cfc}Bh{{Db{Dl}}}}{{Blc}Bl{{Db{Dl}}}}`{cBd{}}{c{{d{e}}}{}{}}0000000{cAd{}}000{cAf{}}000{{CfAf}Bh}{{Cfc}Bh{{Dn{Cb}}Dd}}{{Blc}Bl{{Dn{Cb}}Dd}}{{Cfc}Bh{{E`{Cb}{{Df{Cn}}}}Dd}}{{Blc}Bl{{E`{Cb}{{Df{Cn}}}}Dd}}{{Cfc}Bh{{E`{Cb}{{Df{Cn}}}}}}{{Blc}Bl{{E`{Cb}{{Df{Cn}}}}}}````````````````{ce{}{}}0000000{{EbAf}Bh}{{Edh}{{d{{d{BhAh}}Af}}}}`{{}Ed}{{}Ef}{{}Eb}{{}Bn}{EbBh}{{EfAj}Al}{cc{}}000{{EbCl}Eb}{{BnCl}Bn};;;;{{{j{c}}}{{j{l}}}{}}000{{{n{c}}}{{n{l}}}{}}0{{{A`{c}}}{{A`{l}}}{}}000>>>>{EbCn}{BnCn}`{{Efh}Cn}{{Ebh}Cn}{{Bnh}Cn}<{BnBn}>0{{Bnc}Bn{D`{Db{{d{BhAh}}}}Dd}}{{Bnc}Bn{D`{Db{{d{BhAh}}}}}}{{Bnc}Bn{{Dh{h}{{Df{{d{BhAh}}}}}}Dd}}{{Bnc}Bn{{Dh{h}{{Df{{d{BhAh}}}}}}}}{{Bnc}Bn{{Dj{h}{{Df{{d{BhAh}}}}}}Dd}}{{Bnc}Bn{{Dj{h}{{Df{{d{BhAh}}}}}}}}`{EbBh}`{{Ebc}Bh{{Db{Dl}}}}{{Bnc}Bn{{Db{Dl}}}}`{cBd{}}{c{{d{e}}}{}{}}0000000{cAd{}}000{cAf{}}000{{EbAf}Bh}{{Ebc}Bh{{Dn{h}}Dd}}{{Bnc}Bn{{Dn{h}}Dd}}{{Ebc}Bh{{E`{h}{{Df{Cn}}}}Dd}}{{Bnc}Bn{{E`{h}{{Df{Cn}}}}Dd}}{{Ebc}Bh{{E`{h}{{Df{Cn}}}}}}{{Bnc}Bn{{E`{h}{{Df{Cn}}}}}}``{{hCb}Bh}{ce{}{}}000{hh}{EhEh}{{ce}Bh{}{}}0`{{hh}Cn}{{EhEh}Cn}{{ce}Cn{}{}}00000{{hAj}Al}{{EhAj}Al}{cc{}}0`99{{{j{c}}}{{j{l}}}{}}0{{{n{c}}}{{n{l}}}{}}0{{{A`{c}}}{{A`{l}}}{}}0<<``{{CbEhAf{Bb{{Ej{Cb}}}}}h}`>=={c{{d{e}}}{}{}}0{Af{{d{EhAh}}}}11{cAd{}}0{cAf{}}0{{hEh}Bh}`{ce{}{}}0{CbCb}{{ce}Bh{}{}}{{CbCb}Cn}{{ce}Cn{}{}}00{{CbAj}Al}?{{}Cb}{{Cbc}BhEl}`7{{{j{c}}}{{j{l}}}{}}{{{n{c}}}{{n{l}}}{}}{{{A`{c}}}{{A`{l}}}{}}::{Af{{d{CbAh}}}}{c{{d{e}}}{}{}}0?>``<<`{{}En}{{EnCb}{{d{{Bb{h}}Ah}}}}{{EnAj}Al}{cc{}}{ce{}{}}9870{{Enh}{{d{BhAh}}}}`66{cAd{}}{cAf{}}```{{{F`{c}}CbCb}{{d{bAh}}}C`}44{{{F`{c}}AfAf}{{d{bAh}}}C`}65>=<5{c{{F`{c}}}{}};;43``{{FbCbCb}{{d{bAh}}}}{{FbAfAf}{{d{bAh}}}}","c":[],"p":[[5,"UserDto",6],[6,"Result",426],[10,"Deserializer",427],[5,"User",307],[5,"Box",428],[10,"Any",429],[5,"Arc",430],[5,"Rc",431],[10,"Serializer",432],[5,"TypeId",429],[1,"str"],[6,"UsersError",27],[5,"Formatter",433],[8,"Result",433],[6,"Error",434],[10,"Error",435],[6,"Option",436],[5,"String",437],[5,"MockUserRepository",55],[1,"unit"],[5,"MockUserRepository_UserRepository",55],[5,"Expectation",101],[5,"Expectation",204],[10,"UserRepository",55],[5,"UserId",359],[5,"Error",433],[5,"Common",101],[6,"Rfunc",101],[6,"Matcher",101],[5,"Sequence",438],[1,"bool"],[10,"Clone",439],[10,"Into",440],[10,"Send",441],[17,"Output"],[10,"FnOnce",442],[10,"FnMut",442],[5,"TimesRange",438],[10,"Predicate",443],[10,"Fn",442],[5,"Common",204],[6,"Rfunc",204],[6,"Matcher",204],[5,"Username",307],[5,"Vec",444],[10,"Hasher",445],[5,"UserRepositoryConcrete",385],[5,"CreateUserUseCaseInteractor",406],[10,"UserUseCases",423]],"b":[[36,"impl-Debug-for-UsersError"],[37,"impl-Display-for-UsersError"]]}],\
["utils",{"doc":"","t":"CCCCHCHH","n":["infrastructure","settings","db","dynamo_db_client","dynamodb_client","settings","dynamo_endpoint","table_name"],"q":[[0,"utils"],[2,"utils::infrastructure"],[3,"utils::infrastructure::db"],[4,"utils::infrastructure::db::dynamo_db_client"],[5,"utils::settings"],[6,"utils::settings::settings"],[8,"aws_sdk_dynamodb::client"]],"d":["","","","","","read environment values the following value are constant …","read a table name from the environment value This is used …","read a table name from the environment value"],"i":[0,0,0,0,0,0,0,0],"f":"````{{}b}`{{}d}0","c":[],"p":[[5,"Client",8],[1,"str"]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
