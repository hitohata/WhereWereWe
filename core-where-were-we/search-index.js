var searchIndex = new Map(JSON.parse('[\
["core_where_were_we",{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["test_utils",{"doc":"","t":"CCCFNNNONNHNNNNNONNN","n":["infrastructure","db","dynamo_db_client","TestDynamoTable","borrow","borrow_mut","client","client","default","delete_table","dynamodb_test_client","from","generate_test_table","into","into_shared","table_name","table_name","try_from","try_into","type_id"],"q":[[0,"test_utils"],[1,"test_utils::infrastructure"],[2,"test_utils::infrastructure::db"],[3,"test_utils::infrastructure::db::dynamo_db_client"],[20,"aws_sdk_dynamodb::client"],[21,"alloc::string"],[22,"core::result"],[23,"core::any"]],"d":["","","","The table struct for the test.","","","","","","remove a table","The DynamoDB user client for the test.","Returns the argument unchanged.","This function is used for the test.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1],"f":"````{ce{}{}}0{bd}`{fb}{bh}{{}d}{cc{}}255{bj}`{c{{l{e}}}{}{}}0{cn{}}","c":[],"p":[[5,"TestDynamoTable",3],[5,"Client",20],[1,"str"],[1,"unit"],[5,"String",21],[6,"Result",22],[5,"TypeId",23]],"b":[]}],\
["travel",{"doc":"","t":"CCCCCPPGNNNNNNNNNNNNNNNCCCCFFKOCCNNNNNNNNNNNNNMNOMNONNNNNNNNNNNNNMNONMNOMNONNNNNNNNCCCCCPFPFPPPGPPPPPGPPNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNONONNONNNNNNNNNNNNNNNNNNNNNNNNPFPFPPPGPPPPPGPPNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNONONNONNNNNNNNNNNNNNNNNNNNNNNNPFPFPPPGPPPPPGPPNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNONONNONNNNNNNNNNNNNNNNNNNNNNNNPFPFPPPGPPPPPGPPNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNONONNONNNNNNNNNNNNNNNNNNNNNNNNPFPFPPPGPPPPPGPPNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNONONNONNNNNNNNNNNNNNNNNNNNNNNNCCCCFNNNNNONONONNNNNNONNNNNNNONNNNNNNNHHFNNNNNNNNNNNNONNNNNNNNNONONONNNNNOCCFNNNNNNNNNNNNNONNNNNNNNNNFNNNNNNNNNNNNNONNNNNNNNNNCCCFNNNNNNNNNNNNNNONONNNNNONONNNNCCFNNNNNNNNNNNNNONNNNNNNNNNNFNNNNNNNNNNNONNNNNNNNNNNCFNNONNHHHNNNNNNNNNNNNNONNNNNCSSKFNNONNNNMNMNNNNNNONNNN","n":["errors","models","repository","service","errors","DBError","DomainError","TravelError","borrow","borrow_mut","fmt","fmt","from","into","into_any","into_any_arc","into_any_rc","into_shared","to_string","try_from","try_into","type_id","type_name","repository","todo","travel","todo_repository","MockTodoRepository","MockTodoRepository_TodoRepository","TodoRepository","TodoRepository_expectations","__mock_MockTodoRepository","__mock_MockTodoRepository_TodoRepository","borrow","borrow","borrow_mut","borrow_mut","checkpoint","checkpoint","default","default","expect_find_todo_by_id","expect_find_todo_list_group_by_id","expect_list_todo","expect_save_todo","expect_save_todo_list_group","find_todo_by_id","find_todo_by_id","find_todo_by_id","find_todo_list_group_by_id","find_todo_list_group_by_id","find_todo_list_group_by_id","fmt","from","from","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_shared","into_shared","list_todo","list_todo","list_todo","new","save_todo","save_todo","save_todo","save_todo_list_group","save_todo_list_group","save_todo_list_group","try_from","try_from","try_into","try_into","type_id","type_id","type_name","type_name","__find_todo_by_id","__find_todo_list_group_by_id","__list_todo","__save_todo","__save_todo_list_group","Always","Common","Default","Expectation","Expired","Func","FuncSt","Matcher","Mut","MutSt","Once","OnceSt","Pred","Rfunc","_Phantom","_Phantom","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_mut","common","default","default","default","default","drop","fmt","from","from","from","from","in_sequence","in_sequence","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_shared","into_shared","into_shared","into_shared","is_done","is_done","matcher","matches","matches","matches","never","never","new","once","return_const","return_const_st","return_once","return_once_st","returning","returning_st","rfunc","satisfy_sequence","seq_handle","times","times","times","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_name","type_name","type_name","type_name","verify_sequence","with","with","withf","withf","withf_st","withf_st","Always","Common","Default","Expectation","Expired","Func","FuncSt","Matcher","Mut","MutSt","Once","OnceSt","Pred","Rfunc","_Phantom","_Phantom","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_mut","common","default","default","default","default","drop","fmt","from","from","from","from","in_sequence","in_sequence","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_shared","into_shared","into_shared","into_shared","is_done","is_done","matcher","matches","matches","matches","never","never","new","once","return_const","return_const_st","return_once","return_once_st","returning","returning_st","rfunc","satisfy_sequence","seq_handle","times","times","times","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_name","type_name","type_name","type_name","verify_sequence","with","with","withf","withf","withf_st","withf_st","Always","Common","Default","Expectation","Expired","Func","FuncSt","Matcher","Mut","MutSt","Once","OnceSt","Pred","Rfunc","_Phantom","_Phantom","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_mut","common","default","default","default","default","drop","fmt","from","from","from","from","in_sequence","in_sequence","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_shared","into_shared","into_shared","into_shared","is_done","is_done","matcher","matches","matches","matches","never","never","new","once","return_const","return_const_st","return_once","return_once_st","returning","returning_st","rfunc","satisfy_sequence","seq_handle","times","times","times","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_name","type_name","type_name","type_name","verify_sequence","with","with","withf","withf","withf_st","withf_st","Always","Common","Default","Expectation","Expired","Func","FuncSt","Matcher","Mut","MutSt","Once","OnceSt","Pred","Rfunc","_Phantom","_Phantom","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_mut","common","default","default","default","default","drop","fmt","from","from","from","from","in_sequence","in_sequence","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_shared","into_shared","into_shared","into_shared","is_done","is_done","matcher","matches","matches","matches","never","never","new","once","return_const","return_const_st","return_once","return_once_st","returning","returning_st","rfunc","satisfy_sequence","seq_handle","times","times","times","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_name","type_name","type_name","type_name","verify_sequence","with","with","withf","withf","withf_st","withf_st","Always","Common","Default","Expectation","Expired","Func","FuncSt","Matcher","Mut","MutSt","Once","OnceSt","Pred","Rfunc","_Phantom","_Phantom","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_mut","common","default","default","default","default","drop","fmt","from","from","from","from","in_sequence","in_sequence","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_shared","into_shared","into_shared","into_shared","is_done","is_done","matcher","matches","matches","matches","never","never","new","once","return_const","return_const_st","return_once","return_once_st","returning","returning_st","rfunc","satisfy_sequence","seq_handle","times","times","times","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_name","type_name","type_name","type_name","verify_sequence","with","with","withf","withf","withf_st","withf_st","entity","id","todo","todo_group","Todo","borrow","borrow_mut","clone","clone_into","description","description","done","done","due_date","due_date","eq","equivalent","equivalent","equivalent","fmt","from","id","into","into_any","into_any_arc","into_any_rc","into_shared","new","summary","summary","to_owned","todo_id","toggle_todo","try_from","try_into","type_id","type_name","update","validate_description","validate_summary","TodoListGroup","add_todo","borrow","borrow_mut","clone","clone_into","eq","equivalent","equivalent","equivalent","fmt","from","group_name","group_name","into","into_any","into_any_arc","into_any_rc","into_shared","new","remove_todo","to_owned","todo","todo","todo_list_group_id","todo_list_group_id","travel_id","travel_id","try_from","try_into","type_id","type_name","tz","tz","todo_id","todo_list_group_id","TodoId","as_out","borrow","borrow_mut","clone","clone_into","eq","equivalent","equivalent","equivalent","fmt","from","from","id","id","into","into_any","into_any_arc","into_any_rc","into_shared","to_owned","try_from","try_into","type_id","type_name","TodoListGroupId","as_out","borrow","borrow_mut","clone","clone_into","eq","equivalent","equivalent","equivalent","fmt","from","from","id","id","into","into_any","into_any_arc","into_any_rc","into_shared","to_owned","try_from","try_into","type_id","type_name","entity","id","travel","Travel","add_traveler","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_any","into_any_arc","into_any_rc","into_shared","involve_user","involved_users","involved_users","name","name","new","preclude_user","remove_traveler","to_owned","travel_id","travel_id","travelers","travelers","try_from","try_into","type_id","type_name","travel_id","user_id","TravelId","borrow","borrow_mut","clone","clone_into","eq","equivalent","equivalent","equivalent","fmt","from","generate","hash","id","id","into","into_any","into_any_arc","into_any_rc","into_shared","to_owned","try_from","try_from","try_into","type_id","type_name","UserId","borrow","borrow_mut","clone","clone_into","eq","equivalent","equivalent","equivalent","fmt","from","hash","id","into","into_any","into_any_arc","into_any_rc","into_shared","to_owned","try_from","try_from","try_into","type_id","type_name","todo_repository","TodoRepositoryConcrete","borrow","borrow_mut","client","clone","clone_into","convert_hashmap_into_option_string","convert_into_todo","convert_into_todo_list_group","default","find_todo_by_id","find_todo_list_group_by_id","fmt","from","into","into_any","into_any_arc","into_any_rc","into_shared","list_todo","save_todo","save_todo_list_group","table_name","to_owned","try_from","try_into","type_id","type_name","todo_id_service","TODO_KEY","TODO_LIST_GROUP_KEY","TodoIdService","TodoIdServiceConcrete","borrow","borrow_mut","client","count_up","default","from","get_count","get_todo_id","get_todo_id","get_todo_list_group_id","get_todo_list_group_id","into","into_any","into_any_arc","into_any_rc","into_shared","table_name","try_from","try_into","type_id","type_name"],"q":[[0,"travel"],[4,"travel::errors"],[5,"travel::errors::errors"],[23,"travel::models"],[26,"travel::models::repository"],[27,"travel::models::repository::todo_repository"],[83,"travel::models::repository::todo_repository::__mock_MockTodoRepository_TodoRepository"],[88,"travel::models::repository::todo_repository::__mock_MockTodoRepository_TodoRepository::__find_todo_by_id"],[191,"travel::models::repository::todo_repository::__mock_MockTodoRepository_TodoRepository::__find_todo_list_group_by_id"],[294,"travel::models::repository::todo_repository::__mock_MockTodoRepository_TodoRepository::__list_todo"],[397,"travel::models::repository::todo_repository::__mock_MockTodoRepository_TodoRepository::__save_todo"],[500,"travel::models::repository::todo_repository::__mock_MockTodoRepository_TodoRepository::__save_todo_list_group"],[603,"travel::models::todo"],[605,"travel::models::todo::entity"],[607,"travel::models::todo::entity::todo"],[643,"travel::models::todo::entity::todo_group"],[677,"travel::models::todo::id"],[679,"travel::models::todo::id::todo_id"],[704,"travel::models::todo::id::todo_list_group_id"],[729,"travel::models::travel"],[731,"travel::models::travel::entity"],[732,"travel::models::travel::entity::travel"],[762,"travel::models::travel::id"],[764,"travel::models::travel::id::travel_id"],[790,"travel::models::travel::id::user_id"],[814,"travel::repository"],[815,"travel::repository::todo_repository"],[843,"travel::service"],[844,"travel::service::todo_id_service"],[869,"core::fmt"],[870,"core::fmt"],[871,"core::any"],[872,"alloc::sync"],[873,"alloc::rc"],[874,"alloc::string"],[875,"core::result"],[876,"core::any"],[877,"core::fmt"],[878,"mockall"],[879,"core::clone"],[880,"core::convert"],[881,"core::marker"],[882,"core::ops::function"],[883,"core::ops::function"],[884,"core::ops::function"],[885,"core::hash"],[886,"aws_sdk_dynamodb::types::_attribute_value"],[887,"std::collections::hash::map"]],"d":["","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","The repository trait of the to-do","","","","","","","","","","","Validate that all current expectations for all methods have","Validate that all current expectations for all methods have","","","Create an <code>Expectation</code> for mocking the <code>find_todo_by_id</code> …","Create an <code>Expectation</code> for mocking the …","Create an <code>Expectation</code> for mocking the <code>list_todo</code> method","Create an <code>Expectation</code> for mocking the <code>save_todo</code> method","Create an <code>Expectation</code> for mocking the <code>save_todo_list_group</code> …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","Create a new mock object with no expectations.","","","","","","","","","","","","","","","","","","","","","Holds the stuff that is independent of the output type","","Expectation type for methods that return a <code>&#39;static</code> type. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Add this expectation to a <code>Sequence</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Validate this expectation’s matcher.","Forbid this expectation from ever being called.","Forbid this expectation from ever being called.","Create a new, default, <code>Expectation</code>","Expect this expectation to be called exactly once.  …","Return a constant value from the <code>Expectation</code>","Single-threaded version of <code>return_const</code>.  This is useful …","Supply an <code>FnOnce</code> closure that will provide the return …","Single-threaded version of <code>return_once</code>.  This is useful for","Supply a closure that will provide the return value for …","Single-threaded version of <code>returning</code>. Can be used when the …","","","","Expect this expectation to be called any number of times …","Restrict the number of times that that this method may be …","","","","","","","","","","","","","","","","","","","","","Set matching criteria for this Expectation.","","Set a matching function for this Expectation.","","Single-threaded version of <code>withf</code>. Can be used when the …","","Holds the stuff that is independent of the output type","","Expectation type for methods that return a <code>&#39;static</code> type. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Add this expectation to a <code>Sequence</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Validate this expectation’s matcher.","Forbid this expectation from ever being called.","Forbid this expectation from ever being called.","Create a new, default, <code>Expectation</code>","Expect this expectation to be called exactly once.  …","Return a constant value from the <code>Expectation</code>","Single-threaded version of <code>return_const</code>.  This is useful …","Supply an <code>FnOnce</code> closure that will provide the return …","Single-threaded version of <code>return_once</code>.  This is useful for","Supply a closure that will provide the return value for …","Single-threaded version of <code>returning</code>. Can be used when the …","","","","Expect this expectation to be called any number of times …","Restrict the number of times that that this method may be …","","","","","","","","","","","","","","","","","","","","","Set matching criteria for this Expectation.","","Set a matching function for this Expectation.","","Single-threaded version of <code>withf</code>. Can be used when the …","","Holds the stuff that is independent of the output type","","Expectation type for methods that return a <code>&#39;static</code> type. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Add this expectation to a <code>Sequence</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Validate this expectation’s matcher.","Forbid this expectation from ever being called.","Forbid this expectation from ever being called.","Create a new, default, <code>Expectation</code>","Expect this expectation to be called exactly once.  …","Return a constant value from the <code>Expectation</code>","Single-threaded version of <code>return_const</code>.  This is useful …","Supply an <code>FnOnce</code> closure that will provide the return …","Single-threaded version of <code>return_once</code>.  This is useful for","Supply a closure that will provide the return value for …","Single-threaded version of <code>returning</code>. Can be used when the …","","","","Expect this expectation to be called any number of times …","Restrict the number of times that that this method may be …","","","","","","","","","","","","","","","","","","","","","Set matching criteria for this Expectation.","","Set a matching function for this Expectation.","","Single-threaded version of <code>withf</code>. Can be used when the …","","Holds the stuff that is independent of the output type","","Expectation type for methods that return a <code>&#39;static</code> type. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Add this expectation to a <code>Sequence</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Validate this expectation’s matcher.","Forbid this expectation from ever being called.","Forbid this expectation from ever being called.","Create a new, default, <code>Expectation</code>","Expect this expectation to be called exactly once.  …","Return a constant value from the <code>Expectation</code>","Single-threaded version of <code>return_const</code>.  This is useful …","Supply an <code>FnOnce</code> closure that will provide the return …","Single-threaded version of <code>return_once</code>.  This is useful for","Supply a closure that will provide the return value for …","Single-threaded version of <code>returning</code>. Can be used when the …","","","","Expect this expectation to be called any number of times …","Restrict the number of times that that this method may be …","","","","","","","","","","","","","","","","","","","","","Set matching criteria for this Expectation.","","Set a matching function for this Expectation.","","Single-threaded version of <code>withf</code>. Can be used when the …","","Holds the stuff that is independent of the output type","","Expectation type for methods that return a <code>&#39;static</code> type. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Add this expectation to a <code>Sequence</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Validate this expectation’s matcher.","Forbid this expectation from ever being called.","Forbid this expectation from ever being called.","Create a new, default, <code>Expectation</code>","Expect this expectation to be called exactly once.  …","Return a constant value from the <code>Expectation</code>","Single-threaded version of <code>return_const</code>.  This is useful …","Supply an <code>FnOnce</code> closure that will provide the return …","Single-threaded version of <code>return_once</code>.  This is useful for","Supply a closure that will provide the return value for …","Single-threaded version of <code>returning</code>. Can be used when the …","","","","Expect this expectation to be called any number of times …","Restrict the number of times that that this method may be …","","","","","","","","","","","","","","","","","","","","","Set matching criteria for this Expectation.","","Set a matching function for this Expectation.","","Single-threaded version of <code>withf</code>. Can be used when the …","","","to do struct","This is the collection of the to do list","","","","","","","This value must be grater than 0 and less than equal 500.","","This is false by default.","","due date. this is time stamp","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","The done is false by default.","","This value must be grater than 0 and less than equal 200.","","","","","","","","update the summary and the description","","The summary length must be grater than 0 and less than 200.","","add a new to do to this collection","","","","","","","","","","Returns the argument unchanged.","","this to-do group name","Calls <code>U::from(self)</code>.","","","","","","remove a to-do from this collection","","","The collection of the to-do rest","","to-do group ID","","travel ID","","","","","","time offset from the UTC","todo ID This is auto increment number","todo list group ID This is auto increment number","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","travel struct","","add a traveler into this travel","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","involve a user into this travel","","Same as the travelers, this is also HashSet","","the length must be grater than 0 and less than equal 255.","the travelers and the involved users can be None.","preclude an involved user from this travel","remove a traveler from this travel😢","","","","","Travelers are HashSet since the value cannot be …","","","","","Travel ID","user’s ID This is reference only,","travel ID","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","The argument is user ID that must be UUID. If you don’t …","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","This is implementation of the to do repository.","","","","","","","Convert the DynamoDB result hashmap into Option string","Convert the item (HashMap) into the To do struct","Convert the item into the To-do List Group","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Getting id service Return a number that latest ID + 1","","","","","","","","update the counter saving the latest ID","","Returns the argument unchanged.","This function gets the latest ID The return ID has already …","Get the latest + 1 to do list ID if there is no data in …","","Get the latest + 1 to do list ID if there is no data in …","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,12,0,0,12,14,12,14,12,14,12,14,12,12,12,12,12,20,12,14,20,12,14,12,12,14,12,14,12,14,12,14,12,14,12,14,20,12,14,12,20,12,14,20,12,14,12,14,12,14,12,14,12,14,0,0,0,0,0,31,0,30,0,30,31,31,0,30,30,30,30,31,0,30,31,30,31,29,15,30,31,29,15,29,30,15,30,31,29,15,29,31,30,31,29,15,29,15,30,31,29,15,30,31,29,15,29,15,30,31,29,15,30,31,29,15,29,15,29,31,29,15,29,15,15,15,15,15,15,15,15,15,15,29,29,29,15,29,31,30,31,29,15,30,31,29,15,30,31,29,15,30,31,29,15,29,29,15,29,15,29,15,45,0,44,0,44,45,45,0,44,44,44,44,45,0,44,45,44,45,43,16,44,45,43,16,43,44,16,44,45,43,16,43,45,44,45,43,16,43,16,44,45,43,16,44,45,43,16,43,16,44,45,43,16,44,45,43,16,43,16,43,45,43,16,43,16,16,16,16,16,16,16,16,16,16,43,43,43,16,43,45,44,45,43,16,44,45,43,16,44,45,43,16,44,45,43,16,43,43,16,43,16,43,16,48,0,47,0,47,48,48,0,47,47,47,47,48,0,47,48,47,48,46,17,47,48,46,17,46,47,17,47,48,46,17,46,48,47,48,46,17,46,17,47,48,46,17,47,48,46,17,46,17,47,48,46,17,47,48,46,17,46,17,46,48,46,17,46,17,17,17,17,17,17,17,17,17,17,46,46,46,17,46,48,47,48,46,17,47,48,46,17,47,48,46,17,47,48,46,17,46,46,17,46,17,46,17,51,0,50,0,50,51,51,0,50,50,50,50,51,0,50,51,50,51,49,18,50,51,49,18,49,50,18,50,51,49,18,49,51,50,51,49,18,49,18,50,51,49,18,50,51,49,18,49,18,50,51,49,18,50,51,49,18,49,18,49,51,49,18,49,18,18,18,18,18,18,18,18,18,18,49,49,49,18,49,51,50,51,49,18,50,51,49,18,50,51,49,18,50,51,49,18,49,49,18,49,18,49,18,54,0,53,0,53,54,54,0,53,53,53,53,54,0,53,54,53,54,52,19,53,54,52,19,52,53,19,53,54,52,19,52,54,53,54,52,19,52,19,53,54,52,19,53,54,52,19,52,19,53,54,52,19,53,54,52,19,52,19,52,54,52,19,52,19,19,19,19,19,19,19,19,19,19,52,52,52,19,52,54,53,54,52,19,53,54,52,19,53,54,52,19,53,54,52,19,52,52,19,52,19,52,19,0,0,0,0,0,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,0,0,0,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,0,0,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,0,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,0,0,0,0,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,0,0,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,0,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,0,0,63,63,63,63,63,0,0,0,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,0,0,0,0,0,66,66,66,66,66,66,66,67,66,67,66,66,66,66,66,66,66,66,66,66,66],"f":"````````{ce{}{}}0{{bd}f}0{cc{}}2{{{h{c}}}{{h{j}}}{}}{{{l{c}}}{{l{j}}}{}}{{{n{c}}}{{n{j}}}{}}5{cA`{}}{c{{Ab{e}}}{}{}}0{cAd{}}{cAf{}}``````````9999{AhAj}{AlAj}{{}Ah}{{}Al}{AhAn}{AhB`}{AhBb}{AhBd}{AhBf}{{BhBjBlBn}{{Ab{{Cb{C`}}b}}}}{{AhBjBlBn}{{Ab{{Cb{C`}}b}}}}`{{BhBjBl}{{Ab{{Cb{Cd}}b}}}}{{AhBjBl}{{Ab{{Cb{Cd}}b}}}}`{{Ahd}{{Ab{AjCf}}}}{cc{}}0{ce{}{}}0{{{h{c}}}{{h{j}}}{}}0{{{l{c}}}{{l{j}}}{}}0{{{n{c}}}{{n{j}}}{}}033{{BhBjBl}{{Ab{{Ch{C`}}b}}}}{{AhBjBl}{{Ab{{Ch{C`}}b}}}}`{{}Ah}{{BhBjBlC`}{{Ab{Ajb}}}}{{AhBjBlC`}{{Ab{Ajb}}}}`{{BhCd}{{Ab{Ajb}}}}{{AhCd}{{Ab{Ajb}}}}`{c{{Ab{e}}}{}{}}000{cAd{}}0{cAf{}}0`````````````````````========{{CjAf}Aj}{{ClBjBlBn}{{Ab{{Ab{{Cb{C`}}b}}Af}}}}`{{}Cl}{{}Cn}{{}Cj}{{}An}{CjAj}{{Cnd}f}{cc{}}000{{CjD`}Cj}{{AnD`}An}{ce{}{}}000{{{h{c}}}{{h{j}}}{}}000{{{l{c}}}{{l{j}}}{}}0{{{n{c}}}{{n{j}}}{}}0003333{CjDb}{AnDb}`{{CnBjBlBn}Db}{{CjBjBlBn}Db}{{AnBjBlBn}Db}={AnAn}?0{{Anc}An{Dd{Df{{Ab{{Cb{C`}}b}}}}Dh}}{{Anc}An{Dd{Df{{Ab{{Cb{C`}}b}}}}}}{{Anc}An{{Dl{BjBlBn}{{Dj{{Ab{{Cb{C`}}b}}}}}}Dh}}{{Anc}An{{Dl{BjBlBn}{{Dj{{Ab{{Cb{C`}}b}}}}}}}}{{Anc}An{{Dn{BjBlBn}{{Dj{{Ab{{Cb{C`}}b}}}}}}Dh}}{{Anc}An{{Dn{BjBlBn}{{Dj{{Ab{{Cb{C`}}b}}}}}}}}`{CjAj}`{{Cjc}Aj{{Df{E`}}}}{{Anc}An{{Df{E`}}}}`{cA`{}}{c{{Ab{e}}}{}{}}0000000{cAd{}}000{cAf{}}000{{CjAf}Aj}{{Cjceg}Aj{{Eb{Bj}}Dh}{{Eb{Bl}}Dh}{{Eb{Bn}}Dh}}{{Anceg}An{{Eb{Bj}}Dh}{{Eb{Bl}}Dh}{{Eb{Bn}}Dh}}{{Cjc}Aj{{Ed{BjBlBn}{{Dj{Db}}}}Dh}}{{Anc}An{{Ed{BjBlBn}{{Dj{Db}}}}Dh}}{{Cjc}Aj{{Ed{BjBlBn}{{Dj{Db}}}}}}{{Anc}An{{Ed{BjBlBn}{{Dj{Db}}}}}}````````````````{ce{}{}}0000000{{EfAf}Aj}{{EhBjBl}{{Ab{{Ab{{Cb{Cd}}b}}Af}}}}`{{}Eh}{{}Ej}{{}Ef}{{}B`}{EfAj}{{Ejd}f}{cc{}}000{{EfD`}Ef}{{B`D`}B`};;;;{{{h{c}}}{{h{j}}}{}}000{{{l{c}}}{{l{j}}}{}}0{{{n{c}}}{{n{j}}}{}}000>>>>{EfDb}{B`Db}`{{EjBjBl}Db}{{EfBjBl}Db}{{B`BjBl}Db}<{B`B`}>0{{B`c}B`{Dd{Df{{Ab{{Cb{Cd}}b}}}}Dh}}{{B`c}B`{Dd{Df{{Ab{{Cb{Cd}}b}}}}}}{{B`c}B`{{Dl{BjBl}{{Dj{{Ab{{Cb{Cd}}b}}}}}}Dh}}{{B`c}B`{{Dl{BjBl}{{Dj{{Ab{{Cb{Cd}}b}}}}}}}}{{B`c}B`{{Dn{BjBl}{{Dj{{Ab{{Cb{Cd}}b}}}}}}Dh}}{{B`c}B`{{Dn{BjBl}{{Dj{{Ab{{Cb{Cd}}b}}}}}}}}`{EfAj}`{{Efc}Aj{{Df{E`}}}}{{B`c}B`{{Df{E`}}}}`{cA`{}}{c{{Ab{e}}}{}{}}0000000{cAd{}}000{cAf{}}000{{EfAf}Aj}{{Efce}Aj{{Eb{Bj}}Dh}{{Eb{Bl}}Dh}}{{B`ce}B`{{Eb{Bj}}Dh}{{Eb{Bl}}Dh}}{{Efc}Aj{{Ed{BjBl}{{Dj{Db}}}}Dh}}{{B`c}B`{{Ed{BjBl}{{Dj{Db}}}}Dh}}{{Efc}Aj{{Ed{BjBl}{{Dj{Db}}}}}}{{B`c}B`{{Ed{BjBl}{{Dj{Db}}}}}}````````````````{ce{}{}}0000000{{ElAf}Aj}{{EnBjBl}{{Ab{{Ab{{Ch{C`}}b}}Af}}}}`{{}En}{{}F`}{{}El}{{}Bb}{ElAj}{{F`d}f}{cc{}}000{{ElD`}El}{{BbD`}Bb};;;;{{{h{c}}}{{h{j}}}{}}000{{{l{c}}}{{l{j}}}{}}0{{{n{c}}}{{n{j}}}{}}000>>>>{ElDb}{BbDb}`{{F`BjBl}Db}{{ElBjBl}Db}{{BbBjBl}Db}<{BbBb}>0{{Bbc}Bb{Dd{Df{{Ab{{Ch{C`}}b}}}}Dh}}{{Bbc}Bb{Dd{Df{{Ab{{Ch{C`}}b}}}}}}{{Bbc}Bb{{Dl{BjBl}{{Dj{{Ab{{Ch{C`}}b}}}}}}Dh}}{{Bbc}Bb{{Dl{BjBl}{{Dj{{Ab{{Ch{C`}}b}}}}}}}}{{Bbc}Bb{{Dn{BjBl}{{Dj{{Ab{{Ch{C`}}b}}}}}}Dh}}{{Bbc}Bb{{Dn{BjBl}{{Dj{{Ab{{Ch{C`}}b}}}}}}}}`{ElAj}`{{Elc}Aj{{Df{E`}}}}{{Bbc}Bb{{Df{E`}}}}`{cA`{}}{c{{Ab{e}}}{}{}}0000000{cAd{}}000{cAf{}}000{{ElAf}Aj}{{Elce}Aj{{Eb{Bj}}Dh}{{Eb{Bl}}Dh}}{{Bbce}Bb{{Eb{Bj}}Dh}{{Eb{Bl}}Dh}}{{Elc}Aj{{Ed{BjBl}{{Dj{Db}}}}Dh}}{{Bbc}Bb{{Ed{BjBl}{{Dj{Db}}}}Dh}}{{Elc}Aj{{Ed{BjBl}{{Dj{Db}}}}}}{{Bbc}Bb{{Ed{BjBl}{{Dj{Db}}}}}}````````````````{ce{}{}}0000000{{FbAf}Aj}{{FdBjBlC`}{{Ab{{Ab{Ajb}}Af}}}}`{{}Fd}{{}Ff}{{}Fb}{{}Bd}{FbAj}{{Ffd}f}{cc{}}000{{FbD`}Fb}{{BdD`}Bd};;;;{{{h{c}}}{{h{j}}}{}}000{{{l{c}}}{{l{j}}}{}}0{{{n{c}}}{{n{j}}}{}}000>>>>{FbDb}{BdDb}`{{FfBjBlC`}Db}{{FbBjBlC`}Db}{{BdBjBlC`}Db}<{BdBd}>0{{Bdc}Bd{Dd{Df{{Ab{Ajb}}}}Dh}}{{Bdc}Bd{Dd{Df{{Ab{Ajb}}}}}}{{Bdc}Bd{{Dl{BjBlC`}{{Dj{{Ab{Ajb}}}}}}Dh}}{{Bdc}Bd{{Dl{BjBlC`}{{Dj{{Ab{Ajb}}}}}}}}{{Bdc}Bd{{Dn{BjBlC`}{{Dj{{Ab{Ajb}}}}}}Dh}}{{Bdc}Bd{{Dn{BjBlC`}{{Dj{{Ab{Ajb}}}}}}}}`{FbAj}`{{Fbc}Aj{{Df{E`}}}}{{Bdc}Bd{{Df{E`}}}}`{cA`{}}{c{{Ab{e}}}{}{}}0000000{cAd{}}000{cAf{}}000{{FbAf}Aj}{{Fbceg}Aj{{Eb{Bj}}Dh}{{Eb{Bl}}Dh}{{Eb{C`}}Dh}}{{Bdceg}Bd{{Eb{Bj}}Dh}{{Eb{Bl}}Dh}{{Eb{C`}}Dh}}{{Fbc}Aj{{Ed{BjBlC`}{{Dj{Db}}}}Dh}}{{Bdc}Bd{{Ed{BjBlC`}{{Dj{Db}}}}Dh}}{{Fbc}Aj{{Ed{BjBlC`}{{Dj{Db}}}}}}{{Bdc}Bd{{Ed{BjBlC`}{{Dj{Db}}}}}}````````````````{ce{}{}}0000000{{FhAf}Aj}{{FjCd}{{Ab{{Ab{Ajb}}Af}}}}`{{}Fj}{{}Fl}{{}Fh}{{}Bf}{FhAj}{{Fld}f}{cc{}}000{{FhD`}Fh}{{BfD`}Bf};;;;{{{h{c}}}{{h{j}}}{}}000{{{l{c}}}{{l{j}}}{}}0{{{n{c}}}{{n{j}}}{}}000>>>>{FhDb}{BfDb}`{{FlCd}Db}{{FhCd}Db}{{BfCd}Db}<{BfBf}>0{{Bfc}Bf{Dd{Df{{Ab{Ajb}}}}Dh}}{{Bfc}Bf{Dd{Df{{Ab{Ajb}}}}}}{{Bfc}Bf{{Dl{Cd}{{Dj{{Ab{Ajb}}}}}}Dh}}{{Bfc}Bf{{Dl{Cd}{{Dj{{Ab{Ajb}}}}}}}}{{Bfc}Bf{{Dn{Cd}{{Dj{{Ab{Ajb}}}}}}Dh}}{{Bfc}Bf{{Dn{Cd}{{Dj{{Ab{Ajb}}}}}}}}`{FhAj}`{{Fhc}Aj{{Df{E`}}}}{{Bfc}Bf{{Df{E`}}}}`{cA`{}}{c{{Ab{e}}}{}{}}0000000{cAd{}}000{cAf{}}000{{FhAf}Aj}{{Fhc}Aj{{Eb{Cd}}Dh}}{{Bfc}Bf{{Eb{Cd}}Dh}}{{Fhc}Aj{{Ed{Cd}{{Dj{Db}}}}Dh}}{{Bfc}Bf{{Ed{Cd}{{Dj{Db}}}}Dh}}{{Fhc}Aj{{Ed{Cd}{{Dj{Db}}}}}}{{Bfc}Bf{{Ed{Cd}{{Dj{Db}}}}}}`````{ce{}{}}0{C`C`}{{ce}Aj{}{}}{C`{{Cb{Af}}}}`{C`Db}`{C`{{Cb{Fn}}}}`{{C`C`}Db}{{ce}Db{}{}}00{{C`d}f}{cc{}}`9{{{h{c}}}{{h{j}}}{}}{{{l{c}}}{{l{j}}}{}}{{{n{c}}}{{n{j}}}{}}<{{BnAf{Cb{Af}}{Cb{Fn}}{Cb{Db}}}{{Ab{C`b}}}}{C`Af}`>{C`Bn}{C`Aj}{c{{Ab{e}}}{}{}}0{cAd{}}{cAf{}}{{C`Af{Cb{Af}}}{{Ab{Ajb}}}}{{{Cb{Af}}}{{Ab{Ajb}}}}{Af{{Ab{Ajb}}}}`{{CdC`}Aj}{ce{}{}}0{CdCd}{{ce}Aj{}{}}{{CdCd}Db}{{ce}Db{}{}}00{{Cdd}f}{cc{}}{CdAf}`7{{{h{c}}}{{h{j}}}{}}{{{l{c}}}{{l{j}}}{}}{{{n{c}}}{{n{j}}}{}}:{{BjBlAf{Ch{C`}}{Cb{G`}}}{{Ab{Cdb}}}}{{CdBn}Aj}<{Cd{{Ch{C`}}}}`{CdBl}`{CdBj}`{c{{Ab{e}}}{}{}}0{cAd{}}{cAf{}}{Cd{{Cb{G`}}}}````{c{{Gb{e}}}{}{}}{ce{}{}}0{BnBn}{{ce}Aj{}{}}{{BnBn}Db}{{ce}Db{}{}}00{{Bnd}f}{cc{}}{GdBn}{BnGd}`8{{{h{c}}}{{h{j}}}{}}{{{l{c}}}{{l{j}}}{}}{{{n{c}}}{{n{j}}}{}};;{c{{Ab{e}}}{}{}}0{cAd{}}{cAf{}}`?>>{BlBl}={{BlBl}Db}<<<{{Bld}f}{GdBl}<{BlGd}`{ce{}{}};:9008876````{{GfGh}Aj}11{GfGf}{{ce}Aj{}{}}{{Gfd}f}{cc{}}5{{{h{c}}}{{h{j}}}{}}{{{l{c}}}{{l{j}}}{}}{{{n{c}}}{{n{j}}}{}}87{Gf{{Ch{Gh}}}}`{GfAf}`{{BjAf{Gj{Gh}}{Cb{{Gj{Gh}}}}}{{Ab{Gfb}}}}:{{GfGh}{{Ab{Ajb}}}}<{GfBj}`4`{c{{Ab{e}}}{}{}}0{cAd{}}{cAf{}}```{ce{}{}}0{BjBj}?{{BjBj}Db}{{ce}Db{}{}}00{{Bjd}f}{cc{}}{{}Bj}{{Bjc}AjGl}{BjAf}`8{{{h{c}}}{{h{j}}}{}}{{{l{c}}}{{l{j}}}{}}{{{n{c}}}{{n{j}}}{}};;{Af{{Ab{Bjb}}}}??>=`<<{GhGh}{{ce}Aj{}{}}{{GhGh}Db}<<<{{Ghd}f};{{Ghc}AjGl}`{ce{}{}}98700{c{{Ab{e}}}{}{}}{Af{{Ab{Ghb}}}}1{cAd{}}{cAf{}}``44`{GnGn}9{{{Hb{A`H`}}Af}{{Ab{{Cb{A`}}b}}}}{{{Hb{A`H`}}}{{Ab{C`b}}}}{{Bj{Hb{A`H`}}{Ch{C`}}}{{Ab{Cdb}}}}{{}Gn}{{GnBjBlBn}{{Ab{{Cb{C`}}b}}}}{{GnBjBl}{{Ab{{Cb{Cd}}b}}}}{{Gnd}f}{cc{}}={{{h{c}}}{{h{j}}}{}}{{{l{c}}}{{l{j}}}{}}{{{n{c}}}{{n{j}}}{}}{ce{}{}}{{GnBjBl}{{Ab{{Ch{C`}}b}}}}{{GnBjBlC`}{{Ab{Ajb}}}}{{GnCd}{{Ab{Ajb}}}}`3{c{{Ab{e}}}{}{}}0{cAd{}}{cAf{}}`````66`{{HdBjAfGd}{{Ab{Ajb}}}}{{}Hd}<{{HdBjAf}{{Ab{Gdb}}}}{{HfBjBl}{{Ab{Gdb}}}}{{HdBjBl}{{Ab{Gdb}}}}{{HfBj}{{Ab{Gdb}}}}{{HdBj}{{Ab{Gdb}}}}={{{h{c}}}{{h{j}}}{}}{{{l{c}}}{{l{j}}}{}}{{{n{c}}}{{n{j}}}{}}{ce{}{}}`==<;","c":[],"p":[[6,"TravelError",5],[5,"Formatter",869],[8,"Result",869],[5,"Box",870],[10,"Any",871],[5,"Arc",872],[5,"Rc",873],[5,"String",874],[6,"Result",875],[5,"TypeId",871],[1,"str"],[5,"MockTodoRepository",27],[1,"unit"],[5,"MockTodoRepository_TodoRepository",27],[5,"Expectation",88],[5,"Expectation",191],[5,"Expectation",294],[5,"Expectation",397],[5,"Expectation",500],[10,"TodoRepository",27],[5,"TravelId",764],[5,"TodoListGroupId",704],[5,"TodoId",679],[5,"Todo",607],[6,"Option",876],[5,"TodoListGroup",643],[5,"Error",869],[5,"Vec",877],[5,"Common",88],[6,"Rfunc",88],[6,"Matcher",88],[5,"Sequence",878],[1,"bool"],[10,"Clone",879],[10,"Into",880],[10,"Send",881],[17,"Output"],[10,"FnOnce",882],[10,"FnMut",882],[5,"TimesRange",878],[10,"Predicate",883],[10,"Fn",882],[5,"Common",191],[6,"Rfunc",191],[6,"Matcher",191],[5,"Common",294],[6,"Rfunc",294],[6,"Matcher",294],[5,"Common",397],[6,"Rfunc",397],[6,"Matcher",397],[5,"Common",500],[6,"Rfunc",500],[6,"Matcher",500],[1,"i64"],[1,"i32"],[5,"Out",884],[1,"u32"],[5,"Travel",732],[5,"UserId",790],[1,"slice"],[10,"Hasher",885],[5,"TodoRepositoryConcrete",815],[6,"AttributeValue",886],[5,"HashMap",887],[5,"TodoIdServiceConcrete",844],[10,"TodoIdService",844]],"b":[[10,"impl-Debug-for-TravelError"],[11,"impl-Display-for-TravelError"]]}],\
["users",{"doc":"","t":"CCCCCCFNNNONNONNNNNOONNNNNCPPPPPPGPNNNNNNNNNNNNNNNNNCCCCFFKOCCNNNNNNNNNNMNONNNNNNNNNNNNNNMNONNNNNNNNCCPFPFPPPGPPPPPGPPNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNONONNONNNNNNNNNNNNNNNNNNNNNNNNPFPFPPPGPPPPPGPPNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNONONNONNNNNNNNNNNNNNNNNNNNNNNNFFNNNNNNNNNONNNNNNNNNNNNONNNNNNNNNNOONONNNNNNNNNNNNNFNNNNNNNNNNNNNONNNNNNNNNNNCFNNONNNNNNNNNNONNNNCCFNNNNNNNNNNNNNHNNNNOKMMMM","n":["dtos","errors","models","repository","use_case","user_dto","UserDto","borrow","borrow_mut","deserialize","email","from","from","id","into","into_any","into_any_arc","into_any_rc","into_shared","name","partners","serialize","try_from","try_into","type_id","type_name","errors","Connection","DBError","DomainError","InvalidUUID","UserNotFind","UsernameError","UsersError","UsersUseCaseError","borrow","borrow_mut","fmt","fmt","from","from","into","into_any","into_any_arc","into_any_rc","into_shared","source","to_string","try_from","try_into","type_id","type_name","repository","user","user_id","user_repository","MockUserRepository","MockUserRepository_UserRepository","UserRepository","UserRepository_expectations","__mock_MockUserRepository","__mock_MockUserRepository_UserRepository","borrow","borrow","borrow_mut","borrow_mut","checkpoint","checkpoint","default","default","expect_find_by_id","expect_save","find_by_id","find_by_id","find_by_id","fmt","from","from","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_shared","into_shared","new","save","save","save","try_from","try_from","try_into","try_into","type_id","type_id","type_name","type_name","__find_by_id","__save","Always","Common","Default","Expectation","Expired","Func","FuncSt","Matcher","Mut","MutSt","Once","OnceSt","Pred","Rfunc","_Phantom","_Phantom","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_mut","common","default","default","default","default","drop","fmt","from","from","from","from","in_sequence","in_sequence","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_shared","into_shared","into_shared","into_shared","is_done","is_done","matcher","matches","matches","matches","never","never","new","once","return_const","return_const_st","return_once","return_once_st","returning","returning_st","rfunc","satisfy_sequence","seq_handle","times","times","times","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_name","type_name","type_name","type_name","verify_sequence","with","with","withf","withf","withf_st","withf_st","Always","Common","Default","Expectation","Expired","Func","FuncSt","Matcher","Mut","MutSt","Once","OnceSt","Pred","Rfunc","_Phantom","_Phantom","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_mut","common","default","default","default","default","drop","fmt","from","from","from","from","in_sequence","in_sequence","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_shared","into_shared","into_shared","into_shared","is_done","is_done","matcher","matches","matches","matches","never","never","new","once","return_const","return_const_st","return_once","return_once_st","returning","returning_st","rfunc","satisfy_sequence","seq_handle","times","times","times","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_name","type_name","type_name","type_name","verify_sequence","with","with","withf","withf","withf_st","withf_st","User","Username","add_partner","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","email","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","id","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_shared","into_shared","name","name","new","partners","remove_partner","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","type_id","type_id","type_name","type_name","update_name","UserId","borrow","borrow_mut","clone","clone_into","eq","equivalent","equivalent","equivalent","fmt","from","generate","hash","id","id","into","into_any","into_any_arc","into_any_rc","into_shared","to_owned","try_from","try_from","try_into","type_id","type_name","user_repository","UserRepositoryConcrete","borrow","borrow_mut","client","default","find_by_id","fmt","from","into","into_any","into_any_arc","into_any_rc","into_shared","save","table_name","try_from","try_into","type_id","type_name","user_use_case_implementation","user_use_cases","CreateUserUseCaseInteractor","add_partner","borrow","borrow_mut","change_name","create","from","into","into_any","into_any_arc","into_any_rc","into_shared","new","remove_partner","to_user_id_struct","try_from","try_into","type_id","type_name","user_repository","UserUseCases","add_partner","change_name","create","remove_partner"],"q":[[0,"users"],[5,"users::dtos"],[6,"users::dtos::user_dto"],[26,"users::errors"],[27,"users::errors::errors"],[52,"users::models"],[55,"users::models::repository"],[56,"users::models::repository::user_repository"],[100,"users::models::repository::user_repository::__mock_MockUserRepository_UserRepository"],[102,"users::models::repository::user_repository::__mock_MockUserRepository_UserRepository::__find_by_id"],[205,"users::models::repository::user_repository::__mock_MockUserRepository_UserRepository::__save"],[308,"users::models::user"],[360,"users::models::user_id"],[386,"users::repository"],[387,"users::repository::user_repository"],[406,"users::use_case"],[408,"users::use_case::user_use_case_implementation"],[428,"users::use_case::user_use_cases"],[433,"core::result"],[434,"serde::de"],[435,"alloc::boxed"],[436,"core::any"],[437,"alloc::sync"],[438,"alloc::rc"],[439,"serde::ser"],[440,"core::any"],[441,"core::fmt"],[442,"core::error"],[443,"core::option"],[444,"alloc::string"],[445,"core::fmt"],[446,"core::clone"],[447,"core::convert"],[448,"core::marker"],[449,"core::ops::function"],[450,"core::ops::function"],[451,"core::ops::function"],[452,"core::hash"]],"d":["","","","","","","User DTO","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","user’s model","The User ID","","","","","","","","","","","","Validate that all current expectations for all methods have","Validate that all current expectations for all methods have","","","Create an <code>Expectation</code> for mocking the <code>find_by_id</code> method","Create an <code>Expectation</code> for mocking the <code>save</code> method","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Create a new mock object with no expectations.","","","","","","","","","","","","","","","Holds the stuff that is independent of the output type","","Expectation type for methods that return a <code>&#39;static</code> type. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Add this expectation to a <code>Sequence</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Validate this expectation’s matcher.","Forbid this expectation from ever being called.","Forbid this expectation from ever being called.","Create a new, default, <code>Expectation</code>","Expect this expectation to be called exactly once.  …","Return a constant value from the <code>Expectation</code>","Single-threaded version of <code>return_const</code>.  This is useful …","Supply an <code>FnOnce</code> closure that will provide the return …","Single-threaded version of <code>return_once</code>.  This is useful for","Supply a closure that will provide the return value for …","Single-threaded version of <code>returning</code>. Can be used when the …","","","","Expect this expectation to be called any number of times …","Restrict the number of times that that this method may be …","","","","","","","","","","","","","","","","","","","","","Set matching criteria for this Expectation.","","Set a matching function for this Expectation.","","Single-threaded version of <code>withf</code>. Can be used when the …","","Holds the stuff that is independent of the output type","","Expectation type for methods that return a <code>&#39;static</code> type. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Add this expectation to a <code>Sequence</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Validate this expectation’s matcher.","Forbid this expectation from ever being called.","Forbid this expectation from ever being called.","Create a new, default, <code>Expectation</code>","Expect this expectation to be called exactly once.  …","Return a constant value from the <code>Expectation</code>","Single-threaded version of <code>return_const</code>.  This is useful …","Supply an <code>FnOnce</code> closure that will provide the return …","Single-threaded version of <code>return_once</code>.  This is useful for","Supply a closure that will provide the return value for …","Single-threaded version of <code>returning</code>. Can be used when the …","","","","Expect this expectation to be called any number of times …","Restrict the number of times that that this method may be …","","","","","","","","","","","","","","","","","","","","","Set matching criteria for this Expectation.","","Set a matching function for this Expectation.","","Single-threaded version of <code>withf</code>. Can be used when the …","","Username must be grater than 0 and less than equal 255.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","User ID","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Username","","","the partners if there is no partners, this value will be …","","","","","","","","","","","","","","User ID consists of an ID only that is UUID","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","The argument is user ID that must be UUID. If you don’t …","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","create a new user","","","Add a new partner The partner is added to the user. The …","","","update a user’s name","create a new user","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Remove a new partner The partner is removed from the user. …","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,12,12,12,12,12,12,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,0,0,0,0,0,19,0,0,19,21,19,21,19,21,19,21,19,19,24,19,21,19,19,21,19,21,19,21,19,21,19,21,19,21,19,24,19,21,19,21,19,21,19,21,19,21,0,0,29,0,28,0,28,29,29,0,28,28,28,28,29,0,28,29,28,29,27,22,28,29,27,22,27,28,22,28,29,27,22,27,29,28,29,27,22,27,22,28,29,27,22,28,29,27,22,27,22,28,29,27,22,28,29,27,22,27,22,27,29,27,22,27,22,22,22,22,22,22,22,22,22,22,27,27,27,22,27,29,28,29,27,22,28,29,27,22,28,29,27,22,28,29,27,22,27,27,22,27,22,27,22,43,0,42,0,42,43,43,0,42,42,42,42,43,0,42,43,42,43,41,23,42,43,41,23,41,42,23,42,43,41,23,41,43,42,43,41,23,41,23,42,43,41,23,42,43,41,23,41,23,42,43,41,23,42,43,41,23,41,23,41,43,41,23,41,23,23,23,23,23,23,23,23,23,23,41,41,41,23,41,43,42,43,41,23,42,43,41,23,42,43,41,23,42,43,41,23,41,41,23,41,23,41,23,0,0,4,4,44,4,44,4,44,4,44,4,4,44,4,4,4,44,44,44,4,44,4,44,4,4,44,4,44,4,44,4,44,4,44,4,44,4,4,4,4,44,4,44,44,4,44,4,44,4,44,4,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,0,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,0,0,0,48,48,48,48,48,48,48,48,48,48,48,48,48,0,48,48,48,48,48,0,50,50,50,50],"f":"```````{ce{}{}}0{c{{d{b}}}f}`{cc{}}{hb}`3{{{j{c}}}{{j{l}}}{}}{{{n{c}}}{{n{l}}}{}}{{{A`{c}}}{{A`{l}}}{}}6``{{bc}dAb}{c{{d{e}}}{}{}}0{cAd{}}{cAf{}}`````````::{{AhAj}Al}0{AnAh}:<876<{Ah{{Bb{B`}}}}{cBd{}}6654``````````>>>>{BfBh}{BjBh}{{}Bf}{{}Bj}{BfBl}{BfBn}{{C`Cb}{{d{{Bb{h}}Ah}}}}{{BfCb}{{d{{Bb{h}}Ah}}}}`{{BfAj}{{d{BhCd}}}}{cc{}}0{ce{}{}}0{{{j{c}}}{{j{l}}}{}}0{{{n{c}}}{{n{l}}}{}}0{{{A`{c}}}{{A`{l}}}{}}033;{{C`h}{{d{BhAh}}}}{{Bfh}{{d{BhAh}}}}`{c{{d{e}}}{}{}}000{cAd{}}0{cAf{}}0``````````````````88888888{{CfAf}Bh}{{ChCb}{{d{{d{{Bb{h}}Ah}}Af}}}}`{{}Ch}{{}Cj}{{}Cf}{{}Bl}{CfBh}{{CjAj}Al}{cc{}}000{{CfCl}Cf}{{BlCl}Bl}{ce{}{}}000{{{j{c}}}{{j{l}}}{}}000{{{n{c}}}{{n{l}}}{}}0{{{A`{c}}}{{A`{l}}}{}}0003333{CfCn}{BlCn}`{{CjCb}Cn}{{CfCb}Cn}{{BlCb}Cn}={BlBl}?0{{Blc}Bl{D`{Db{{d{{Bb{h}}Ah}}}}Dd}}{{Blc}Bl{D`{Db{{d{{Bb{h}}Ah}}}}}}{{Blc}Bl{{Dh{Cb}{{Df{{d{{Bb{h}}Ah}}}}}}Dd}}{{Blc}Bl{{Dh{Cb}{{Df{{d{{Bb{h}}Ah}}}}}}}}{{Blc}Bl{{Dj{Cb}{{Df{{d{{Bb{h}}Ah}}}}}}Dd}}{{Blc}Bl{{Dj{Cb}{{Df{{d{{Bb{h}}Ah}}}}}}}}`{CfBh}`{{Cfc}Bh{{Db{Dl}}}}{{Blc}Bl{{Db{Dl}}}}`{cBd{}}{c{{d{e}}}{}{}}0000000{cAd{}}000{cAf{}}000{{CfAf}Bh}{{Cfc}Bh{{Dn{Cb}}Dd}}{{Blc}Bl{{Dn{Cb}}Dd}}{{Cfc}Bh{{E`{Cb}{{Df{Cn}}}}Dd}}{{Blc}Bl{{E`{Cb}{{Df{Cn}}}}Dd}}{{Cfc}Bh{{E`{Cb}{{Df{Cn}}}}}}{{Blc}Bl{{E`{Cb}{{Df{Cn}}}}}}````````````````{ce{}{}}0000000{{EbAf}Bh}{{Edh}{{d{{d{BhAh}}Af}}}}`{{}Ed}{{}Ef}{{}Eb}{{}Bn}{EbBh}{{EfAj}Al}{cc{}}000{{EbCl}Eb}{{BnCl}Bn};;;;{{{j{c}}}{{j{l}}}{}}000{{{n{c}}}{{n{l}}}{}}0{{{A`{c}}}{{A`{l}}}{}}000>>>>{EbCn}{BnCn}`{{Efh}Cn}{{Ebh}Cn}{{Bnh}Cn}<{BnBn}>0{{Bnc}Bn{D`{Db{{d{BhAh}}}}Dd}}{{Bnc}Bn{D`{Db{{d{BhAh}}}}}}{{Bnc}Bn{{Dh{h}{{Df{{d{BhAh}}}}}}Dd}}{{Bnc}Bn{{Dh{h}{{Df{{d{BhAh}}}}}}}}{{Bnc}Bn{{Dj{h}{{Df{{d{BhAh}}}}}}Dd}}{{Bnc}Bn{{Dj{h}{{Df{{d{BhAh}}}}}}}}`{EbBh}`{{Ebc}Bh{{Db{Dl}}}}{{Bnc}Bn{{Db{Dl}}}}`{cBd{}}{c{{d{e}}}{}{}}0000000{cAd{}}000{cAf{}}000{{EbAf}Bh}{{Ebc}Bh{{Dn{h}}Dd}}{{Bnc}Bn{{Dn{h}}Dd}}{{Ebc}Bh{{E`{h}{{Df{Cn}}}}Dd}}{{Bnc}Bn{{E`{h}{{Df{Cn}}}}Dd}}{{Ebc}Bh{{E`{h}{{Df{Cn}}}}}}{{Bnc}Bn{{E`{h}{{Df{Cn}}}}}}``{{hCb}Bh}{ce{}{}}000{hh}{EhEh}{{ce}Bh{}{}}0`{{hh}Cn}{{EhEh}Cn}{{ce}Cn{}{}}00000{{hAj}Al}{{EhAj}Al}{cc{}}0`99{{{j{c}}}{{j{l}}}{}}0{{{n{c}}}{{n{l}}}{}}0{{{A`{c}}}{{A`{l}}}{}}0<<``{{CbEhAf{Bb{{Ej{Cb}}}}}h}`>=={c{{d{e}}}{}{}}{Af{{d{EhAh}}}}111{cAd{}}0{cAf{}}0{{hEh}Bh}`{ce{}{}}0{CbCb}{{ce}Bh{}{}}{{CbCb}Cn}{{ce}Cn{}{}}00{{CbAj}Al}?{{}Cb}{{Cbc}BhEl}{CbAf}`8{{{j{c}}}{{j{l}}}{}}{{{n{c}}}{{n{l}}}{}}{{{A`{c}}}{{A`{l}}}{}};;{Af{{d{CbAh}}}}{c{{d{e}}}{}{}}0{cAd{}}{cAf{}}``??`{{}En}{{EnCb}{{d{{Bb{h}}Ah}}}}{{EnAj}Al}{cc{}}{ce{}{}};:90{{Enh}{{d{BhAh}}}}`8876```{{{F`{c}}AfAf}{{d{bAh}}}C`}220032=<;2{c{{F`{c}}}{}}1{{AfAf}{{d{{Fb{CbCb}}Ah}}}};;:9``{{FdAfAf}{{d{bAh}}}}000","c":[],"p":[[5,"UserDto",6],[6,"Result",433],[10,"Deserializer",434],[5,"User",308],[5,"Box",435],[10,"Any",436],[5,"Arc",437],[5,"Rc",438],[10,"Serializer",439],[5,"TypeId",436],[1,"str"],[6,"UsersError",27],[5,"Formatter",440],[8,"Result",440],[6,"Error",441],[10,"Error",442],[6,"Option",443],[5,"String",444],[5,"MockUserRepository",56],[1,"unit"],[5,"MockUserRepository_UserRepository",56],[5,"Expectation",102],[5,"Expectation",205],[10,"UserRepository",56],[5,"UserId",360],[5,"Error",440],[5,"Common",102],[6,"Rfunc",102],[6,"Matcher",102],[5,"Sequence",445],[1,"bool"],[10,"Clone",446],[10,"Into",447],[10,"Send",448],[17,"Output"],[10,"FnOnce",449],[10,"FnMut",449],[5,"TimesRange",445],[10,"Predicate",450],[10,"Fn",449],[5,"Common",205],[6,"Rfunc",205],[6,"Matcher",205],[5,"Username",308],[5,"Vec",451],[10,"Hasher",452],[5,"UserRepositoryConcrete",387],[5,"CreateUserUseCaseInteractor",408],[1,"tuple"],[10,"UserUseCases",428]],"b":[[37,"impl-Debug-for-UsersError"],[38,"impl-Display-for-UsersError"]]}],\
["utils",{"doc":"","t":"CCCCHCHH","n":["infrastructure","settings","db","dynamo_db_client","dynamodb_client","settings","dynamo_endpoint","table_name"],"q":[[0,"utils"],[2,"utils::infrastructure"],[3,"utils::infrastructure::db"],[4,"utils::infrastructure::db::dynamo_db_client"],[5,"utils::settings"],[6,"utils::settings::settings"],[8,"aws_sdk_dynamodb::client"]],"d":["","","","","","read environment values the following value are constant …","read a table name from the environment value This is used …","read a table name from the environment value"],"i":[0,0,0,0,0,0,0,0],"f":"````{{}b}`{{}d}0","c":[],"p":[[5,"Client",8],[1,"str"]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
