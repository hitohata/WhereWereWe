var searchIndex = new Map(JSON.parse('[\
["core_where_were_we",{"doc":"","t":"","n":[],"q":[],"d":[],"i":[],"f":"","c":[],"p":[],"b":[]}],\
["test_utils",{"doc":"","t":"CCCFNNNONNHNNNNNONNN","n":["infrastructure","db","dynamo_db_client","TestDynamoTable","borrow","borrow_mut","client","client","default","delete_table","dynamodb_test_client","from","generate_test_table","into","into_shared","table_name","table_name","try_from","try_into","type_id"],"q":[[0,"test_utils"],[1,"test_utils::infrastructure"],[2,"test_utils::infrastructure::db"],[3,"test_utils::infrastructure::db::dynamo_db_client"],[20,"aws_sdk_dynamodb::client"],[21,"alloc::string"],[22,"core::result"],[23,"core::any"]],"d":["","","","The table struct for the test.","","","","","","remove a table","The DynamoDB user client for the test.","Returns the argument unchanged.","This function is used for the test.","Calls <code>U::from(self)</code>.","","","","","",""],"i":[0,0,0,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1],"f":"````{ce{}{}}0{bd}`{fb}{bh}{{}d}{cc{}}255{bj}`{c{{l{e}}}{}{}}0{cn{}}","c":[],"p":[[5,"TestDynamoTable",3],[5,"Client",20],[1,"str"],[1,"unit"],[5,"String",21],[6,"Result",22],[5,"TypeId",23]],"b":[]}],\
["travel",{"doc":"","t":"CCCCCCFFNNNNONNOONNNNONNNNNNNNNNNNOOOOONNNNNNNNOCPPGNNNNNNNNNNNNNNNCCCCFFKOCCNNNNNNNNNNNNNNMNOMNONNNNNNNNNNNNNMNOMNONMNOMNONNNNNNNNCCCCCCPFPFPPPGPPPPPGPPNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNONONNONNNNNNNNNNNNNNNNNNNNNNNNPFPFPPPGPPPPPGPPNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNONONNONNNNNNNNNNNNNNNNNNNNNNNNPFPFPPPGPPPPPGPPNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNONONNONNNNNNNNNNNNNNNNNNNNNNNNPFPFPPPGPPPPPGPPNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNONONNONNNNNNNNNNNNNNNNNNNNNNNNPFPFPPPGPPPPPGPPNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNONONNONNNNNNNNNNNNNNNNNNNNNNNNPFPFPPPGPPPPPGPPNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNONONNONNNNNNNNNNNNNNNNNNNNNNNNCCCCFNNNNNONONONNNNNNONNNNNNNONNNNNNNNHHFNNNNNNNNNNNNONNNNNNNNNONONONNNNNOCCFNNNNNNNNNNNNNONNNNNNNNNNFNNNNNNNNNNNNNONNNNNNNNNNCCCFNNNNNNNNNNNNNNONONNNNNONONNNNCCFNNNNNNNNNNNNNONNNNNNNNNNNFNNNNNNNNNNNONNNNNNNNNNNCFNNONNHHHNNNNNNNNNNNNNNONNNNNCSSKFNNONNNNMNMNNNNNNONNNN","n":["dots","errors","models","repository","service","todo","ToDoDto","ToDoListGroupDto","borrow","borrow","borrow_mut","borrow_mut","description","deserialize","deserialize","done","due_date","from","from","from","from","group_name","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_shared","into_shared","serialize","serialize","summary","todo","todo_id","todo_list_group_id","travel_id","try_from","try_from","try_into","try_into","type_id","type_id","type_name","type_name","tz","errors","DBError","DomainError","TravelError","borrow","borrow_mut","fmt","fmt","from","into","into_any","into_any_arc","into_any_rc","into_shared","to_string","try_from","try_into","type_id","type_name","repository","todo","travel","todo_repository","MockTodoRepository","MockTodoRepository_TodoRepository","TodoRepository","TodoRepository_expectations","__mock_MockTodoRepository","__mock_MockTodoRepository_TodoRepository","borrow","borrow","borrow_mut","borrow_mut","checkpoint","checkpoint","default","default","expect_find_todo_by_id","expect_find_todo_list_group_by_id","expect_list_todo","expect_list_todo_list_group","expect_save_todo","expect_save_todo_list_group","find_todo_by_id","find_todo_by_id","find_todo_by_id","find_todo_list_group_by_id","find_todo_list_group_by_id","find_todo_list_group_by_id","fmt","from","from","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_shared","into_shared","list_todo","list_todo","list_todo","list_todo_list_group","list_todo_list_group","list_todo_list_group","new","save_todo","save_todo","save_todo","save_todo_list_group","save_todo_list_group","save_todo_list_group","try_from","try_from","try_into","try_into","type_id","type_id","type_name","type_name","__find_todo_by_id","__find_todo_list_group_by_id","__list_todo","__list_todo_list_group","__save_todo","__save_todo_list_group","Always","Common","Default","Expectation","Expired","Func","FuncSt","Matcher","Mut","MutSt","Once","OnceSt","Pred","Rfunc","_Phantom","_Phantom","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_mut","common","default","default","default","default","drop","fmt","from","from","from","from","in_sequence","in_sequence","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_shared","into_shared","into_shared","into_shared","is_done","is_done","matcher","matches","matches","matches","never","never","new","once","return_const","return_const_st","return_once","return_once_st","returning","returning_st","rfunc","satisfy_sequence","seq_handle","times","times","times","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_name","type_name","type_name","type_name","verify_sequence","with","with","withf","withf","withf_st","withf_st","Always","Common","Default","Expectation","Expired","Func","FuncSt","Matcher","Mut","MutSt","Once","OnceSt","Pred","Rfunc","_Phantom","_Phantom","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_mut","common","default","default","default","default","drop","fmt","from","from","from","from","in_sequence","in_sequence","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_shared","into_shared","into_shared","into_shared","is_done","is_done","matcher","matches","matches","matches","never","never","new","once","return_const","return_const_st","return_once","return_once_st","returning","returning_st","rfunc","satisfy_sequence","seq_handle","times","times","times","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_name","type_name","type_name","type_name","verify_sequence","with","with","withf","withf","withf_st","withf_st","Always","Common","Default","Expectation","Expired","Func","FuncSt","Matcher","Mut","MutSt","Once","OnceSt","Pred","Rfunc","_Phantom","_Phantom","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_mut","common","default","default","default","default","drop","fmt","from","from","from","from","in_sequence","in_sequence","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_shared","into_shared","into_shared","into_shared","is_done","is_done","matcher","matches","matches","matches","never","never","new","once","return_const","return_const_st","return_once","return_once_st","returning","returning_st","rfunc","satisfy_sequence","seq_handle","times","times","times","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_name","type_name","type_name","type_name","verify_sequence","with","with","withf","withf","withf_st","withf_st","Always","Common","Default","Expectation","Expired","Func","FuncSt","Matcher","Mut","MutSt","Once","OnceSt","Pred","Rfunc","_Phantom","_Phantom","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_mut","common","default","default","default","default","drop","fmt","from","from","from","from","in_sequence","in_sequence","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_shared","into_shared","into_shared","into_shared","is_done","is_done","matcher","matches","matches","matches","never","never","new","once","return_const","return_const_st","return_once","return_once_st","returning","returning_st","rfunc","satisfy_sequence","seq_handle","times","times","times","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_name","type_name","type_name","type_name","verify_sequence","with","with","withf","withf","withf_st","withf_st","Always","Common","Default","Expectation","Expired","Func","FuncSt","Matcher","Mut","MutSt","Once","OnceSt","Pred","Rfunc","_Phantom","_Phantom","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_mut","common","default","default","default","default","drop","fmt","from","from","from","from","in_sequence","in_sequence","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_shared","into_shared","into_shared","into_shared","is_done","is_done","matcher","matches","matches","matches","never","never","new","once","return_const","return_const_st","return_once","return_once_st","returning","returning_st","rfunc","satisfy_sequence","seq_handle","times","times","times","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_name","type_name","type_name","type_name","verify_sequence","with","with","withf","withf","withf_st","withf_st","Always","Common","Default","Expectation","Expired","Func","FuncSt","Matcher","Mut","MutSt","Once","OnceSt","Pred","Rfunc","_Phantom","_Phantom","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_mut","common","default","default","default","default","drop","fmt","from","from","from","from","in_sequence","in_sequence","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_shared","into_shared","into_shared","into_shared","is_done","is_done","matcher","matches","matches","matches","never","never","new","once","return_const","return_const_st","return_once","return_once_st","returning","returning_st","rfunc","satisfy_sequence","seq_handle","times","times","times","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_name","type_name","type_name","type_name","verify_sequence","with","with","withf","withf","withf_st","withf_st","entity","id","todo","todo_group","Todo","borrow","borrow_mut","clone","clone_into","description","description","done","done","due_date","due_date","eq","equivalent","equivalent","equivalent","fmt","from","id","into","into_any","into_any_arc","into_any_rc","into_shared","new","summary","summary","to_owned","todo_id","toggle_todo","try_from","try_into","type_id","type_name","update","validate_description","validate_summary","TodoListGroup","add_todo","borrow","borrow_mut","clone","clone_into","eq","equivalent","equivalent","equivalent","fmt","from","group_name","group_name","into","into_any","into_any_arc","into_any_rc","into_shared","new","remove_todo","to_owned","todo","todo","todo_list_group_id","todo_list_group_id","travel_id","travel_id","try_from","try_into","type_id","type_name","tz","tz","todo_id","todo_list_group_id","TodoId","as_out","borrow","borrow_mut","clone","clone_into","eq","equivalent","equivalent","equivalent","fmt","from","from","id","id","into","into_any","into_any_arc","into_any_rc","into_shared","to_owned","try_from","try_into","type_id","type_name","TodoListGroupId","as_out","borrow","borrow_mut","clone","clone_into","eq","equivalent","equivalent","equivalent","fmt","from","from","id","id","into","into_any","into_any_arc","into_any_rc","into_shared","to_owned","try_from","try_into","type_id","type_name","entity","id","travel","Travel","add_traveler","borrow","borrow_mut","clone","clone_into","fmt","from","into","into_any","into_any_arc","into_any_rc","into_shared","involve_user","involved_users","involved_users","name","name","new","preclude_user","remove_traveler","to_owned","travel_id","travel_id","travelers","travelers","try_from","try_into","type_id","type_name","travel_id","user_id","TravelId","borrow","borrow_mut","clone","clone_into","eq","equivalent","equivalent","equivalent","fmt","from","generate","hash","id","id","into","into_any","into_any_arc","into_any_rc","into_shared","to_owned","try_from","try_from","try_into","type_id","type_name","UserId","borrow","borrow_mut","clone","clone_into","eq","equivalent","equivalent","equivalent","fmt","from","hash","id","into","into_any","into_any_arc","into_any_rc","into_shared","to_owned","try_from","try_from","try_into","type_id","type_name","todo_repository","TodoRepositoryConcrete","borrow","borrow_mut","client","clone","clone_into","convert_hashmap_into_option_string","convert_into_todo","convert_into_todo_list_group","default","find_todo_by_id","find_todo_list_group_by_id","fmt","from","into","into_any","into_any_arc","into_any_rc","into_shared","list_todo","list_todo_list_group","save_todo","save_todo_list_group","table_name","to_owned","try_from","try_into","type_id","type_name","todo_id_service","TODO_KEY","TODO_LIST_GROUP_KEY","TodoIdService","TodoIdServiceConcrete","borrow","borrow_mut","client","count_up","default","from","get_count","get_todo_id","get_todo_id","get_todo_list_group_id","get_todo_list_group_id","into","into_any","into_any_arc","into_any_rc","into_shared","table_name","try_from","try_into","type_id","type_name"],"q":[[0,"travel"],[5,"travel::dots"],[6,"travel::dots::todo"],[48,"travel::errors"],[49,"travel::errors::errors"],[67,"travel::models"],[70,"travel::models::repository"],[71,"travel::models::repository::todo_repository"],[131,"travel::models::repository::todo_repository::__mock_MockTodoRepository_TodoRepository"],[137,"travel::models::repository::todo_repository::__mock_MockTodoRepository_TodoRepository::__find_todo_by_id"],[240,"travel::models::repository::todo_repository::__mock_MockTodoRepository_TodoRepository::__find_todo_list_group_by_id"],[343,"travel::models::repository::todo_repository::__mock_MockTodoRepository_TodoRepository::__list_todo"],[446,"travel::models::repository::todo_repository::__mock_MockTodoRepository_TodoRepository::__list_todo_list_group"],[549,"travel::models::repository::todo_repository::__mock_MockTodoRepository_TodoRepository::__save_todo"],[652,"travel::models::repository::todo_repository::__mock_MockTodoRepository_TodoRepository::__save_todo_list_group"],[755,"travel::models::todo"],[757,"travel::models::todo::entity"],[759,"travel::models::todo::entity::todo"],[795,"travel::models::todo::entity::todo_group"],[829,"travel::models::todo::id"],[831,"travel::models::todo::id::todo_id"],[856,"travel::models::todo::id::todo_list_group_id"],[881,"travel::models::travel"],[883,"travel::models::travel::entity"],[884,"travel::models::travel::entity::travel"],[914,"travel::models::travel::id"],[916,"travel::models::travel::id::travel_id"],[942,"travel::models::travel::id::user_id"],[966,"travel::repository"],[967,"travel::repository::todo_repository"],[996,"travel::service"],[997,"travel::service::todo_id_service"],[1022,"core::result"],[1023,"serde::de"],[1024,"alloc::boxed"],[1025,"core::any"],[1026,"alloc::sync"],[1027,"alloc::rc"],[1028,"serde::ser"],[1029,"core::any"],[1030,"core::fmt"],[1031,"core::option"],[1032,"core::fmt"],[1033,"mockall"],[1034,"core::clone"],[1035,"core::convert"],[1036,"core::marker"],[1037,"core::ops::function"],[1038,"core::ops::function"],[1039,"core::ops::function"],[1040,"core::hash"],[1041,"aws_sdk_dynamodb::types::_attribute_value"],[1042,"std::collections::hash::map"]],"d":["","","","","","To-do DTO","To-do DTO","To-do list group DTO","","","","","","","","","","Returns the argument unchanged.","Convert the To-do list group into DTO","Returns the argument unchanged.","Convert the To-do struct into DTO.","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","The repository trait of the to-do","","","","","","","","","","","Validate that all current expectations for all methods have","Validate that all current expectations for all methods have","","","Create an <code>Expectation</code> for mocking the <code>find_todo_by_id</code> …","Create an <code>Expectation</code> for mocking the …","Create an <code>Expectation</code> for mocking the <code>list_todo</code> method","Create an <code>Expectation</code> for mocking the <code>list_todo_list_group</code> …","Create an <code>Expectation</code> for mocking the <code>save_todo</code> method","Create an <code>Expectation</code> for mocking the <code>save_todo_list_group</code> …","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","Create a new mock object with no expectations.","","","","","","","","","","","","","","","","","","","","","","Holds the stuff that is independent of the output type","","Expectation type for methods that return a <code>&#39;static</code> type. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Add this expectation to a <code>Sequence</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Validate this expectation’s matcher.","Forbid this expectation from ever being called.","Forbid this expectation from ever being called.","Create a new, default, <code>Expectation</code>","Expect this expectation to be called exactly once.  …","Return a constant value from the <code>Expectation</code>","Single-threaded version of <code>return_const</code>.  This is useful …","Supply an <code>FnOnce</code> closure that will provide the return …","Single-threaded version of <code>return_once</code>.  This is useful for","Supply a closure that will provide the return value for …","Single-threaded version of <code>returning</code>. Can be used when the …","","","","Expect this expectation to be called any number of times …","Restrict the number of times that that this method may be …","","","","","","","","","","","","","","","","","","","","","Set matching criteria for this Expectation.","","Set a matching function for this Expectation.","","Single-threaded version of <code>withf</code>. Can be used when the …","","Holds the stuff that is independent of the output type","","Expectation type for methods that return a <code>&#39;static</code> type. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Add this expectation to a <code>Sequence</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Validate this expectation’s matcher.","Forbid this expectation from ever being called.","Forbid this expectation from ever being called.","Create a new, default, <code>Expectation</code>","Expect this expectation to be called exactly once.  …","Return a constant value from the <code>Expectation</code>","Single-threaded version of <code>return_const</code>.  This is useful …","Supply an <code>FnOnce</code> closure that will provide the return …","Single-threaded version of <code>return_once</code>.  This is useful for","Supply a closure that will provide the return value for …","Single-threaded version of <code>returning</code>. Can be used when the …","","","","Expect this expectation to be called any number of times …","Restrict the number of times that that this method may be …","","","","","","","","","","","","","","","","","","","","","Set matching criteria for this Expectation.","","Set a matching function for this Expectation.","","Single-threaded version of <code>withf</code>. Can be used when the …","","Holds the stuff that is independent of the output type","","Expectation type for methods that return a <code>&#39;static</code> type. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Add this expectation to a <code>Sequence</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Validate this expectation’s matcher.","Forbid this expectation from ever being called.","Forbid this expectation from ever being called.","Create a new, default, <code>Expectation</code>","Expect this expectation to be called exactly once.  …","Return a constant value from the <code>Expectation</code>","Single-threaded version of <code>return_const</code>.  This is useful …","Supply an <code>FnOnce</code> closure that will provide the return …","Single-threaded version of <code>return_once</code>.  This is useful for","Supply a closure that will provide the return value for …","Single-threaded version of <code>returning</code>. Can be used when the …","","","","Expect this expectation to be called any number of times …","Restrict the number of times that that this method may be …","","","","","","","","","","","","","","","","","","","","","Set matching criteria for this Expectation.","","Set a matching function for this Expectation.","","Single-threaded version of <code>withf</code>. Can be used when the …","","Holds the stuff that is independent of the output type","","Expectation type for methods that return a <code>&#39;static</code> type. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Add this expectation to a <code>Sequence</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Validate this expectation’s matcher.","Forbid this expectation from ever being called.","Forbid this expectation from ever being called.","Create a new, default, <code>Expectation</code>","Expect this expectation to be called exactly once.  …","Return a constant value from the <code>Expectation</code>","Single-threaded version of <code>return_const</code>.  This is useful …","Supply an <code>FnOnce</code> closure that will provide the return …","Single-threaded version of <code>return_once</code>.  This is useful for","Supply a closure that will provide the return value for …","Single-threaded version of <code>returning</code>. Can be used when the …","","","","Expect this expectation to be called any number of times …","Restrict the number of times that that this method may be …","","","","","","","","","","","","","","","","","","","","","Set matching criteria for this Expectation.","","Set a matching function for this Expectation.","","Single-threaded version of <code>withf</code>. Can be used when the …","","Holds the stuff that is independent of the output type","","Expectation type for methods that return a <code>&#39;static</code> type. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Add this expectation to a <code>Sequence</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Validate this expectation’s matcher.","Forbid this expectation from ever being called.","Forbid this expectation from ever being called.","Create a new, default, <code>Expectation</code>","Expect this expectation to be called exactly once.  …","Return a constant value from the <code>Expectation</code>","Single-threaded version of <code>return_const</code>.  This is useful …","Supply an <code>FnOnce</code> closure that will provide the return …","Single-threaded version of <code>return_once</code>.  This is useful for","Supply a closure that will provide the return value for …","Single-threaded version of <code>returning</code>. Can be used when the …","","","","Expect this expectation to be called any number of times …","Restrict the number of times that that this method may be …","","","","","","","","","","","","","","","","","","","","","Set matching criteria for this Expectation.","","Set a matching function for this Expectation.","","Single-threaded version of <code>withf</code>. Can be used when the …","","Holds the stuff that is independent of the output type","","Expectation type for methods that return a <code>&#39;static</code> type. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Add this expectation to a <code>Sequence</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Validate this expectation’s matcher.","Forbid this expectation from ever being called.","Forbid this expectation from ever being called.","Create a new, default, <code>Expectation</code>","Expect this expectation to be called exactly once.  …","Return a constant value from the <code>Expectation</code>","Single-threaded version of <code>return_const</code>.  This is useful …","Supply an <code>FnOnce</code> closure that will provide the return …","Single-threaded version of <code>return_once</code>.  This is useful for","Supply a closure that will provide the return value for …","Single-threaded version of <code>returning</code>. Can be used when the …","","","","Expect this expectation to be called any number of times …","Restrict the number of times that that this method may be …","","","","","","","","","","","","","","","","","","","","","Set matching criteria for this Expectation.","","Set a matching function for this Expectation.","","Single-threaded version of <code>withf</code>. Can be used when the …","","","to do struct","This is the collection of the to do list","","","","","","","This value must be grater than 0 and less than equal 500.","","This is false by default.","","due date. this is time stamp","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","The done is false by default.","","This value must be grater than 0 and less than equal 200.","","","","","","","","update the summary and the description","","The summary length must be grater than 0 and less than 200.","","add a new to do to this collection","","","","","","","","","","Returns the argument unchanged.","","this to-do group name","Calls <code>U::from(self)</code>.","","","","","","remove a to-do from this collection","","","The collection of the to-do rest","","to-do group ID","","travel ID","","","","","","time offset from the UTC","to-do ID This is auto increment number","todo list group ID This is auto increment number","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","travel struct","","add a traveler into this travel","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","involve a user into this travel","","Same as the travelers, this is also HashSet","","the length must be grater than 0 and less than equal 255.","the travelers and the involved users can be None.","preclude an involved user from this travel","remove a traveler from this travel😢","","","","","Travelers are HashSet since the value cannot be …","","","","","Travel ID","user’s ID This is reference only,","travel ID","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","The argument is user ID that must be UUID. If you don’t …","","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","This is implementation of the to do repository.","","","","","","","Convert the DynamoDB result hashmap into Option string","Convert the item (HashMap) into the To do struct","Convert the item into the To-do List Group","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","get the auto-increment like value. …","","","","","","","","","Getting id service Return a number that latest ID + 1","","","","","","","","update the counter saving the latest ID","","Returns the argument unchanged.","This function gets the latest ID The return ID has already …","Get the latest + 1 to do list ID if there is no data in …","","Get the latest + 1 to do list ID if there is no data in …","","Calls <code>U::from(self)</code>.","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,1,4,1,4,4,1,4,4,4,1,1,4,4,1,1,4,1,4,1,4,1,4,1,4,1,4,4,1,4,1,1,1,4,1,4,1,4,1,4,1,0,14,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,0,0,0,0,0,18,0,0,18,20,18,20,18,20,18,20,18,18,18,18,18,18,27,18,20,27,18,20,18,18,20,18,20,18,20,18,20,18,20,18,20,27,18,20,27,18,20,18,27,18,20,27,18,20,18,20,18,20,18,20,18,20,0,0,0,0,0,0,36,0,35,0,35,36,36,0,35,35,35,35,36,0,35,36,35,36,34,21,35,36,34,21,34,35,21,35,36,34,21,34,36,35,36,34,21,34,21,35,36,34,21,35,36,34,21,34,21,35,36,34,21,35,36,34,21,34,21,34,36,34,21,34,21,21,21,21,21,21,21,21,21,21,34,34,34,21,34,36,35,36,34,21,35,36,34,21,35,36,34,21,35,36,34,21,34,34,21,34,21,34,21,50,0,49,0,49,50,50,0,49,49,49,49,50,0,49,50,49,50,48,22,49,50,48,22,48,49,22,49,50,48,22,48,50,49,50,48,22,48,22,49,50,48,22,49,50,48,22,48,22,49,50,48,22,49,50,48,22,48,22,48,50,48,22,48,22,22,22,22,22,22,22,22,22,22,48,48,48,22,48,50,49,50,48,22,49,50,48,22,49,50,48,22,49,50,48,22,48,48,22,48,22,48,22,53,0,52,0,52,53,53,0,52,52,52,52,53,0,52,53,52,53,51,23,52,53,51,23,51,52,23,52,53,51,23,51,53,52,53,51,23,51,23,52,53,51,23,52,53,51,23,51,23,52,53,51,23,52,53,51,23,51,23,51,53,51,23,51,23,23,23,23,23,23,23,23,23,23,51,51,51,23,51,53,52,53,51,23,52,53,51,23,52,53,51,23,52,53,51,23,51,51,23,51,23,51,23,56,0,55,0,55,56,56,0,55,55,55,55,56,0,55,56,55,56,54,24,55,56,54,24,54,55,24,55,56,54,24,54,56,55,56,54,24,54,24,55,56,54,24,55,56,54,24,54,24,55,56,54,24,55,56,54,24,54,24,54,56,54,24,54,24,24,24,24,24,24,24,24,24,24,54,54,54,24,54,56,55,56,54,24,55,56,54,24,55,56,54,24,55,56,54,24,54,54,24,54,24,54,24,59,0,58,0,58,59,59,0,58,58,58,58,59,0,58,59,58,59,57,25,58,59,57,25,57,58,25,58,59,57,25,57,59,58,59,57,25,57,25,58,59,57,25,58,59,57,25,57,25,58,59,57,25,58,59,57,25,57,25,57,59,57,25,57,25,25,25,25,25,25,25,25,25,25,57,57,57,25,57,59,58,59,57,25,58,59,57,25,58,59,57,25,58,59,57,25,57,57,25,57,25,57,25,62,0,61,0,61,62,62,0,61,61,61,61,62,0,61,62,61,62,60,26,61,62,60,26,60,61,26,61,62,60,26,60,62,61,62,60,26,60,26,61,62,60,26,61,62,60,26,60,26,61,62,60,26,61,62,60,26,60,26,60,62,60,26,60,26,26,26,26,26,26,26,26,26,26,60,60,60,26,60,62,61,62,60,26,61,62,60,26,61,62,60,26,61,62,60,26,60,60,26,60,26,60,26,0,0,0,0,0,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,0,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,0,0,0,0,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,0,0,0,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,0,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,0,0,71,71,71,71,71,0,0,0,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,0,0,0,0,0,74,74,74,74,74,74,74,75,74,75,74,74,74,74,74,74,74,74,74,74,74],"f":"````````{ce{}{}}000`{c{{d{b}}}f}{c{{d{h}}}f}``{cc{}}{jb}1{lh}`55{{{n{c}}}{{n{A`}}}{}}0{{{Ab{c}}}{{Ab{A`}}}{}}0{{{Ad{c}}}{{Ad{A`}}}{}}088{{bc}dAf}{{hc}dAf}`````{c{{d{e}}}{}{}}000{cAh{}}0{cAj{}}0`````=={{AlAn}B`}0;>876>{cBb{}}4432``````````????{BdBf}{BhBf}{{}Bd}{{}Bh}{BdBj}{BdBl}{BdBn}{BdC`}{BdCb}{BdCd}{{CfChCjCl}{{d{{Cn{l}}Al}}}}{{BdChCjCl}{{d{{Cn{l}}Al}}}}`{{CfChCj}{{d{{Cn{j}}Al}}}}{{BdChCj}{{d{{Cn{j}}Al}}}}`{{BdAn}{{d{BfD`}}}}{cc{}}0{ce{}{}}0{{{n{c}}}{{n{A`}}}{}}0{{{Ab{c}}}{{Ab{A`}}}{}}0{{{Ad{c}}}{{Ad{A`}}}{}}033{{CfChCj}{{d{{Db{l}}Al}}}}{{BdChCj}{{d{{Db{l}}Al}}}}`{{CfCh}{{d{{Db{j}}Al}}}}{{BdCh}{{d{{Db{j}}Al}}}}`{{}Bd}{{CfChCjl}{{d{BfAl}}}}{{BdChCjl}{{d{BfAl}}}}`{{Cfj}{{d{BfAl}}}}{{Bdj}{{d{BfAl}}}}`{c{{d{e}}}{}{}}000{cAh{}}0{cAj{}}0``````````````````````????????{{DdAj}Bf}{{DfChCjCl}{{d{{d{{Cn{l}}Al}}Aj}}}}`{{}Df}{{}Dh}{{}Dd}{{}Bj}{DdBf}{{DhAn}B`}{cc{}}000{{DdDj}Dd}{{BjDj}Bj}{ce{}{}}000{{{n{c}}}{{n{A`}}}{}}000{{{Ab{c}}}{{Ab{A`}}}{}}0{{{Ad{c}}}{{Ad{A`}}}{}}0003333{DdDl}{BjDl}`{{DhChCjCl}Dl}{{DdChCjCl}Dl}{{BjChCjCl}Dl}={BjBj}?0{{Bjc}Bj{Dn{E`{{d{{Cn{l}}Al}}}}Eb}}{{Bjc}Bj{Dn{E`{{d{{Cn{l}}Al}}}}}}{{Bjc}Bj{{Ef{ChCjCl}{{Ed{{d{{Cn{l}}Al}}}}}}Eb}}{{Bjc}Bj{{Ef{ChCjCl}{{Ed{{d{{Cn{l}}Al}}}}}}}}{{Bjc}Bj{{Eh{ChCjCl}{{Ed{{d{{Cn{l}}Al}}}}}}Eb}}{{Bjc}Bj{{Eh{ChCjCl}{{Ed{{d{{Cn{l}}Al}}}}}}}}`{DdBf}`{{Ddc}Bf{{E`{Ej}}}}{{Bjc}Bj{{E`{Ej}}}}`{cBb{}}{c{{d{e}}}{}{}}0000000{cAh{}}000{cAj{}}000{{DdAj}Bf}{{Ddceg}Bf{{El{Ch}}Eb}{{El{Cj}}Eb}{{El{Cl}}Eb}}{{Bjceg}Bj{{El{Ch}}Eb}{{El{Cj}}Eb}{{El{Cl}}Eb}}{{Ddc}Bf{{En{ChCjCl}{{Ed{Dl}}}}Eb}}{{Bjc}Bj{{En{ChCjCl}{{Ed{Dl}}}}Eb}}{{Ddc}Bf{{En{ChCjCl}{{Ed{Dl}}}}}}{{Bjc}Bj{{En{ChCjCl}{{Ed{Dl}}}}}}````````````````{ce{}{}}0000000{{F`Aj}Bf}{{FbChCj}{{d{{d{{Cn{j}}Al}}Aj}}}}`{{}Fb}{{}Fd}{{}F`}{{}Bl}{F`Bf}{{FdAn}B`}{cc{}}000{{F`Dj}F`}{{BlDj}Bl};;;;{{{n{c}}}{{n{A`}}}{}}000{{{Ab{c}}}{{Ab{A`}}}{}}0{{{Ad{c}}}{{Ad{A`}}}{}}000>>>>{F`Dl}{BlDl}`{{FdChCj}Dl}{{F`ChCj}Dl}{{BlChCj}Dl}<{BlBl}>0{{Blc}Bl{Dn{E`{{d{{Cn{j}}Al}}}}Eb}}{{Blc}Bl{Dn{E`{{d{{Cn{j}}Al}}}}}}{{Blc}Bl{{Ef{ChCj}{{Ed{{d{{Cn{j}}Al}}}}}}Eb}}{{Blc}Bl{{Ef{ChCj}{{Ed{{d{{Cn{j}}Al}}}}}}}}{{Blc}Bl{{Eh{ChCj}{{Ed{{d{{Cn{j}}Al}}}}}}Eb}}{{Blc}Bl{{Eh{ChCj}{{Ed{{d{{Cn{j}}Al}}}}}}}}`{F`Bf}`{{F`c}Bf{{E`{Ej}}}}{{Blc}Bl{{E`{Ej}}}}`{cBb{}}{c{{d{e}}}{}{}}0000000{cAh{}}000{cAj{}}000{{F`Aj}Bf}{{F`ce}Bf{{El{Ch}}Eb}{{El{Cj}}Eb}}{{Blce}Bl{{El{Ch}}Eb}{{El{Cj}}Eb}}{{F`c}Bf{{En{ChCj}{{Ed{Dl}}}}Eb}}{{Blc}Bl{{En{ChCj}{{Ed{Dl}}}}Eb}}{{F`c}Bf{{En{ChCj}{{Ed{Dl}}}}}}{{Blc}Bl{{En{ChCj}{{Ed{Dl}}}}}}````````````````{ce{}{}}0000000{{FfAj}Bf}{{FhChCj}{{d{{d{{Db{l}}Al}}Aj}}}}`{{}Fh}{{}Fj}{{}Ff}{{}Bn}{FfBf}{{FjAn}B`}{cc{}}000{{FfDj}Ff}{{BnDj}Bn};;;;{{{n{c}}}{{n{A`}}}{}}000{{{Ab{c}}}{{Ab{A`}}}{}}0{{{Ad{c}}}{{Ad{A`}}}{}}000>>>>{FfDl}{BnDl}`{{FjChCj}Dl}{{FfChCj}Dl}{{BnChCj}Dl}<{BnBn}>0{{Bnc}Bn{Dn{E`{{d{{Db{l}}Al}}}}Eb}}{{Bnc}Bn{Dn{E`{{d{{Db{l}}Al}}}}}}{{Bnc}Bn{{Ef{ChCj}{{Ed{{d{{Db{l}}Al}}}}}}Eb}}{{Bnc}Bn{{Ef{ChCj}{{Ed{{d{{Db{l}}Al}}}}}}}}{{Bnc}Bn{{Eh{ChCj}{{Ed{{d{{Db{l}}Al}}}}}}Eb}}{{Bnc}Bn{{Eh{ChCj}{{Ed{{d{{Db{l}}Al}}}}}}}}`{FfBf}`{{Ffc}Bf{{E`{Ej}}}}{{Bnc}Bn{{E`{Ej}}}}`{cBb{}}{c{{d{e}}}{}{}}0000000{cAh{}}000{cAj{}}000{{FfAj}Bf}{{Ffce}Bf{{El{Ch}}Eb}{{El{Cj}}Eb}}{{Bnce}Bn{{El{Ch}}Eb}{{El{Cj}}Eb}}{{Ffc}Bf{{En{ChCj}{{Ed{Dl}}}}Eb}}{{Bnc}Bn{{En{ChCj}{{Ed{Dl}}}}Eb}}{{Ffc}Bf{{En{ChCj}{{Ed{Dl}}}}}}{{Bnc}Bn{{En{ChCj}{{Ed{Dl}}}}}}````````````````{ce{}{}}0000000{{FlAj}Bf}{{FnCh}{{d{{d{{Db{j}}Al}}Aj}}}}`{{}Fn}{{}G`}{{}Fl}{{}C`}{FlBf}{{G`An}B`}{cc{}}000{{FlDj}Fl}{{C`Dj}C`};;;;{{{n{c}}}{{n{A`}}}{}}000{{{Ab{c}}}{{Ab{A`}}}{}}0{{{Ad{c}}}{{Ad{A`}}}{}}000>>>>{FlDl}{C`Dl}`{{G`Ch}Dl}{{FlCh}Dl}{{C`Ch}Dl}<{C`C`}>0{{C`c}C`{Dn{E`{{d{{Db{j}}Al}}}}Eb}}{{C`c}C`{Dn{E`{{d{{Db{j}}Al}}}}}}{{C`c}C`{{Ef{Ch}{{Ed{{d{{Db{j}}Al}}}}}}Eb}}{{C`c}C`{{Ef{Ch}{{Ed{{d{{Db{j}}Al}}}}}}}}{{C`c}C`{{Eh{Ch}{{Ed{{d{{Db{j}}Al}}}}}}Eb}}{{C`c}C`{{Eh{Ch}{{Ed{{d{{Db{j}}Al}}}}}}}}`{FlBf}`{{Flc}Bf{{E`{Ej}}}}{{C`c}C`{{E`{Ej}}}}`{cBb{}}{c{{d{e}}}{}{}}0000000{cAh{}}000{cAj{}}000{{FlAj}Bf}{{Flc}Bf{{El{Ch}}Eb}}{{C`c}C`{{El{Ch}}Eb}}{{Flc}Bf{{En{Ch}{{Ed{Dl}}}}Eb}}{{C`c}C`{{En{Ch}{{Ed{Dl}}}}Eb}}{{Flc}Bf{{En{Ch}{{Ed{Dl}}}}}}{{C`c}C`{{En{Ch}{{Ed{Dl}}}}}}````````````````{ce{}{}}0000000{{GbAj}Bf}{{GdChCjl}{{d{{d{BfAl}}Aj}}}}`{{}Gd}{{}Gf}{{}Gb}{{}Cb}{GbBf}{{GfAn}B`}{cc{}}000{{GbDj}Gb}{{CbDj}Cb};;;;{{{n{c}}}{{n{A`}}}{}}000{{{Ab{c}}}{{Ab{A`}}}{}}0{{{Ad{c}}}{{Ad{A`}}}{}}000>>>>{GbDl}{CbDl}`{{GfChCjl}Dl}{{GbChCjl}Dl}{{CbChCjl}Dl}<{CbCb}>0{{Cbc}Cb{Dn{E`{{d{BfAl}}}}Eb}}{{Cbc}Cb{Dn{E`{{d{BfAl}}}}}}{{Cbc}Cb{{Ef{ChCjl}{{Ed{{d{BfAl}}}}}}Eb}}{{Cbc}Cb{{Ef{ChCjl}{{Ed{{d{BfAl}}}}}}}}{{Cbc}Cb{{Eh{ChCjl}{{Ed{{d{BfAl}}}}}}Eb}}{{Cbc}Cb{{Eh{ChCjl}{{Ed{{d{BfAl}}}}}}}}`{GbBf}`{{Gbc}Bf{{E`{Ej}}}}{{Cbc}Cb{{E`{Ej}}}}`{cBb{}}{c{{d{e}}}{}{}}0000000{cAh{}}000{cAj{}}000{{GbAj}Bf}{{Gbceg}Bf{{El{Ch}}Eb}{{El{Cj}}Eb}{{El{l}}Eb}}{{Cbceg}Cb{{El{Ch}}Eb}{{El{Cj}}Eb}{{El{l}}Eb}}{{Gbc}Bf{{En{ChCjl}{{Ed{Dl}}}}Eb}}{{Cbc}Cb{{En{ChCjl}{{Ed{Dl}}}}Eb}}{{Gbc}Bf{{En{ChCjl}{{Ed{Dl}}}}}}{{Cbc}Cb{{En{ChCjl}{{Ed{Dl}}}}}}````````````````{ce{}{}}0000000{{GhAj}Bf}{{Gjj}{{d{{d{BfAl}}Aj}}}}`{{}Gj}{{}Gl}{{}Gh}{{}Cd}{GhBf}{{GlAn}B`}{cc{}}000{{GhDj}Gh}{{CdDj}Cd};;;;{{{n{c}}}{{n{A`}}}{}}000{{{Ab{c}}}{{Ab{A`}}}{}}0{{{Ad{c}}}{{Ad{A`}}}{}}000>>>>{GhDl}{CdDl}`{{Glj}Dl}{{Ghj}Dl}{{Cdj}Dl}<{CdCd}>0{{Cdc}Cd{Dn{E`{{d{BfAl}}}}Eb}}{{Cdc}Cd{Dn{E`{{d{BfAl}}}}}}{{Cdc}Cd{{Ef{j}{{Ed{{d{BfAl}}}}}}Eb}}{{Cdc}Cd{{Ef{j}{{Ed{{d{BfAl}}}}}}}}{{Cdc}Cd{{Eh{j}{{Ed{{d{BfAl}}}}}}Eb}}{{Cdc}Cd{{Eh{j}{{Ed{{d{BfAl}}}}}}}}`{GhBf}`{{Ghc}Bf{{E`{Ej}}}}{{Cdc}Cd{{E`{Ej}}}}`{cBb{}}{c{{d{e}}}{}{}}0000000{cAh{}}000{cAj{}}000{{GhAj}Bf}{{Ghc}Bf{{El{j}}Eb}}{{Cdc}Cd{{El{j}}Eb}}{{Ghc}Bf{{En{j}{{Ed{Dl}}}}Eb}}{{Cdc}Cd{{En{j}{{Ed{Dl}}}}Eb}}{{Ghc}Bf{{En{j}{{Ed{Dl}}}}}}{{Cdc}Cd{{En{j}{{Ed{Dl}}}}}}`````{ce{}{}}0{ll}{{ce}Bf{}{}}{l{{Cn{Aj}}}}`{lDl}`{l{{Cn{Gn}}}}`{{ll}Dl}{{ce}Dl{}{}}00{{lAn}B`}{cc{}}`9{{{n{c}}}{{n{A`}}}{}}{{{Ab{c}}}{{Ab{A`}}}{}}{{{Ad{c}}}{{Ad{A`}}}{}}<{{ClAj{Cn{Aj}}{Cn{Gn}}{Cn{Dl}}}{{d{lAl}}}}{lAj}`>{lCl}{lBf}{c{{d{e}}}{}{}}0{cAh{}}{cAj{}}{{lAj{Cn{Aj}}}{{d{lAl}}}}{{{Cn{Aj}}}{{d{BfAl}}}}{Aj{{d{BfAl}}}}`{{jl}Bf}{ce{}{}}0{jj}{{ce}Bf{}{}}{{jj}Dl}{{ce}Dl{}{}}00{{jAn}B`}{cc{}}{jAj}`7{{{n{c}}}{{n{A`}}}{}}{{{Ab{c}}}{{Ab{A`}}}{}}{{{Ad{c}}}{{Ad{A`}}}{}}:{{ChCjAj{Db{l}}{Cn{H`}}}{{d{jAl}}}}{{jCl}Bf}<{j{{Db{l}}}}`{jCj}`{jCh}`{c{{d{e}}}{}{}}0{cAh{}}{cAj{}}{j{{Cn{H`}}}}````{c{{Hb{e}}}{}{}}{ce{}{}}0{ClCl}{{ce}Bf{}{}}{{ClCl}Dl}{{ce}Dl{}{}}00{{ClAn}B`}{HdCl}{cc{}}{ClHd}`8{{{n{c}}}{{n{A`}}}{}}{{{Ab{c}}}{{Ab{A`}}}{}}{{{Ad{c}}}{{Ad{A`}}}{}};;{c{{d{e}}}{}{}}0{cAh{}}{cAj{}}`?>>{CjCj}={{CjCj}Dl}<<<{{CjAn}B`}:{HdCj}{CjHd}`{ce{}{}};:9008876````{{HfHh}Bf}11{HfHf}{{ce}Bf{}{}}{{HfAn}B`}{cc{}}5{{{n{c}}}{{n{A`}}}{}}{{{Ab{c}}}{{Ab{A`}}}{}}{{{Ad{c}}}{{Ad{A`}}}{}}87{Hf{{Db{Hh}}}}`{HfAj}`{{ChAj{Hj{Hh}}{Cn{{Hj{Hh}}}}}{{d{HfAl}}}}:{{HfHh}{{d{BfAl}}}}<{HfCh}`4`{c{{d{e}}}{}{}}0{cAh{}}{cAj{}}```{ce{}{}}0{ChCh}?{{ChCh}Dl}{{ce}Dl{}{}}00{{ChAn}B`}{cc{}}{{}Ch}{{Chc}BfHl}{ChAj}`8{{{n{c}}}{{n{A`}}}{}}{{{Ab{c}}}{{Ab{A`}}}{}}{{{Ad{c}}}{{Ad{A`}}}{}};;{Aj{{d{ChAl}}}}??>=`<<{HhHh}{{ce}Bf{}{}}{{HhHh}Dl}<<<{{HhAn}B`};{{Hhc}BfHl}`{ce{}{}}98700{Aj{{d{HhAl}}}}{c{{d{e}}}{}{}}0{cAh{}}{cAj{}}``44`{HnHn}9{{{Ib{BbI`}}Aj}{{d{{Cn{Bb}}Al}}}}{{{Ib{BbI`}}}{{d{lAl}}}}{{Ch{Ib{BbI`}}{Db{l}}}{{d{jAl}}}}{{}Hn}{{HnChCjCl}{{d{{Cn{l}}Al}}}}{{HnChCj}{{d{{Cn{j}}Al}}}}{{HnAn}B`}{cc{}}={{{n{c}}}{{n{A`}}}{}}{{{Ab{c}}}{{Ab{A`}}}{}}{{{Ad{c}}}{{Ad{A`}}}{}}{ce{}{}}{{HnChCj}{{d{{Db{l}}Al}}}}{{HnCh}{{d{{Db{j}}Al}}}}{{HnChCjl}{{d{BfAl}}}}{{Hnj}{{d{BfAl}}}}`4{c{{d{e}}}{}{}}0{cAh{}}{cAj{}}`````77`{{IdChAjHd}{{d{BfAl}}}}{{}Id}={{IdChAj}{{d{HdAl}}}}{{IfChCj}{{d{HdAl}}}}{{IdChCj}{{d{HdAl}}}}{{IfCh}{{d{HdAl}}}}{{IdCh}{{d{HdAl}}}}>{{{n{c}}}{{n{A`}}}{}}{{{Ab{c}}}{{Ab{A`}}}{}}{{{Ad{c}}}{{Ad{A`}}}{}}{ce{}{}}`==<;","c":[],"p":[[5,"ToDoListGroupDto",6],[6,"Result",1022],[10,"Deserializer",1023],[5,"ToDoDto",6],[5,"TodoListGroup",795],[5,"Todo",759],[5,"Box",1024],[10,"Any",1025],[5,"Arc",1026],[5,"Rc",1027],[10,"Serializer",1028],[5,"TypeId",1025],[1,"str"],[6,"TravelError",49],[5,"Formatter",1029],[8,"Result",1029],[5,"String",1030],[5,"MockTodoRepository",71],[1,"unit"],[5,"MockTodoRepository_TodoRepository",71],[5,"Expectation",137],[5,"Expectation",240],[5,"Expectation",343],[5,"Expectation",446],[5,"Expectation",549],[5,"Expectation",652],[10,"TodoRepository",71],[5,"TravelId",916],[5,"TodoListGroupId",856],[5,"TodoId",831],[6,"Option",1031],[5,"Error",1029],[5,"Vec",1032],[5,"Common",137],[6,"Rfunc",137],[6,"Matcher",137],[5,"Sequence",1033],[1,"bool"],[10,"Clone",1034],[10,"Into",1035],[10,"Send",1036],[17,"Output"],[10,"FnOnce",1037],[10,"FnMut",1037],[5,"TimesRange",1033],[10,"Predicate",1038],[10,"Fn",1037],[5,"Common",240],[6,"Rfunc",240],[6,"Matcher",240],[5,"Common",343],[6,"Rfunc",343],[6,"Matcher",343],[5,"Common",446],[6,"Rfunc",446],[6,"Matcher",446],[5,"Common",549],[6,"Rfunc",549],[6,"Matcher",549],[5,"Common",652],[6,"Rfunc",652],[6,"Matcher",652],[1,"i64"],[1,"i32"],[5,"Out",1039],[1,"u32"],[5,"Travel",884],[5,"UserId",942],[1,"slice"],[10,"Hasher",1040],[5,"TodoRepositoryConcrete",967],[6,"AttributeValue",1041],[5,"HashMap",1042],[5,"TodoIdServiceConcrete",997],[10,"TodoIdService",997]],"b":[[54,"impl-Display-for-TravelError"],[55,"impl-Debug-for-TravelError"]]}],\
["users",{"doc":"","t":"CCCCCCFNNNONNONNNNNOONNNNNCPPPPPPGPNNNNNNNNNNNNNNNNNCCCCFFKOCCNNNNNNNNNNMNONNNNNNNNNNNNNNMNONNNNNNNNCCPFPFPPPGPPPPPGPPNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNONONNONNNNNNNNNNNNNNNNNNNNNNNNPFPFPPPGPPPPPGPPNNNNNNNNNNONNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNONNNNNNNNNNNNNONONNONNNNNNNNNNNNNNNNNNNNNNNNFFNNNNNNNNNNONNNNNNNNNNNNNONNNNNNNNNNNNOONNONNNNNNNNNNNNNFNNNNNNNNNNNNNONNNNNNNNNNNCFNNONNNNNNNNNNONNNNCCFNNNNNNNNNNNNNHNNNNOKMMMM","n":["dtos","errors","models","repository","use_case","user_dto","UserDto","borrow","borrow_mut","deserialize","email","from","from","id","into","into_any","into_any_arc","into_any_rc","into_shared","name","partners","serialize","try_from","try_into","type_id","type_name","errors","Connection","DBError","DomainError","InvalidUUID","UserNotFind","UsernameError","UsersError","UsersUseCaseError","borrow","borrow_mut","fmt","fmt","from","from","into","into_any","into_any_arc","into_any_rc","into_shared","source","to_string","try_from","try_into","type_id","type_name","repository","user","user_id","user_repository","MockUserRepository","MockUserRepository_UserRepository","UserRepository","UserRepository_expectations","__mock_MockUserRepository","__mock_MockUserRepository_UserRepository","borrow","borrow","borrow_mut","borrow_mut","checkpoint","checkpoint","default","default","expect_find_by_id","expect_save","find_by_id","find_by_id","find_by_id","fmt","from","from","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_shared","into_shared","new","save","save","save","try_from","try_from","try_into","try_into","type_id","type_id","type_name","type_name","__find_by_id","__save","Always","Common","Default","Expectation","Expired","Func","FuncSt","Matcher","Mut","MutSt","Once","OnceSt","Pred","Rfunc","_Phantom","_Phantom","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_mut","common","default","default","default","default","drop","fmt","from","from","from","from","in_sequence","in_sequence","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_shared","into_shared","into_shared","into_shared","is_done","is_done","matcher","matches","matches","matches","never","never","new","once","return_const","return_const_st","return_once","return_once_st","returning","returning_st","rfunc","satisfy_sequence","seq_handle","times","times","times","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_name","type_name","type_name","type_name","verify_sequence","with","with","withf","withf","withf_st","withf_st","Always","Common","Default","Expectation","Expired","Func","FuncSt","Matcher","Mut","MutSt","Once","OnceSt","Pred","Rfunc","_Phantom","_Phantom","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call_mut","common","default","default","default","default","drop","fmt","from","from","from","from","in_sequence","in_sequence","into","into","into","into","into_any","into_any","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_any_rc","into_any_rc","into_shared","into_shared","into_shared","into_shared","is_done","is_done","matcher","matches","matches","matches","never","never","new","once","return_const","return_const_st","return_once","return_once_st","returning","returning_st","rfunc","satisfy_sequence","seq_handle","times","times","times","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_name","type_name","type_name","type_name","verify_sequence","with","with","withf","withf","withf_st","withf_st","User","Username","add_partner","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","email","email","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","from","from","id","id","into","into","into_any","into_any","into_any_arc","into_any_arc","into_any_rc","into_any_rc","into_shared","into_shared","name","name","name","name","new","partners","partners","remove_partner","to_owned","to_owned","try_from","try_from","try_from","try_into","try_into","type_id","type_id","type_name","type_name","update_name","UserId","borrow","borrow_mut","clone","clone_into","eq","equivalent","equivalent","equivalent","fmt","from","generate","hash","id","id","into","into_any","into_any_arc","into_any_rc","into_shared","to_owned","try_from","try_from","try_into","type_id","type_name","user_repository","UserRepositoryConcrete","borrow","borrow_mut","client","default","find_by_id","fmt","from","into","into_any","into_any_arc","into_any_rc","into_shared","save","table_name","try_from","try_into","type_id","type_name","user_use_case_implementation","user_use_cases","CreateUserUseCaseInteractor","add_partner","borrow","borrow_mut","change_name","create","from","into","into_any","into_any_arc","into_any_rc","into_shared","new","remove_partner","to_user_id_struct","try_from","try_into","type_id","type_name","user_repository","UserUseCases","add_partner","change_name","create","remove_partner"],"q":[[0,"users"],[5,"users::dtos"],[6,"users::dtos::user_dto"],[26,"users::errors"],[27,"users::errors::errors"],[52,"users::models"],[55,"users::models::repository"],[56,"users::models::repository::user_repository"],[100,"users::models::repository::user_repository::__mock_MockUserRepository_UserRepository"],[102,"users::models::repository::user_repository::__mock_MockUserRepository_UserRepository::__find_by_id"],[205,"users::models::repository::user_repository::__mock_MockUserRepository_UserRepository::__save"],[308,"users::models::user"],[365,"users::models::user_id"],[391,"users::repository"],[392,"users::repository::user_repository"],[411,"users::use_case"],[413,"users::use_case::user_use_case_implementation"],[433,"users::use_case::user_use_cases"],[438,"core::result"],[439,"serde::de"],[440,"alloc::boxed"],[441,"core::any"],[442,"alloc::sync"],[443,"alloc::rc"],[444,"serde::ser"],[445,"core::any"],[446,"core::fmt"],[447,"core::error"],[448,"core::option"],[449,"alloc::string"],[450,"core::fmt"],[451,"core::clone"],[452,"core::convert"],[453,"core::marker"],[454,"core::ops::function"],[455,"core::ops::function"],[456,"core::ops::function"],[457,"core::hash"]],"d":["","","","","","","User DTO","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","user’s model","The User ID","","","","","","","","","","","","Validate that all current expectations for all methods have","Validate that all current expectations for all methods have","","","Create an <code>Expectation</code> for mocking the <code>find_by_id</code> method","Create an <code>Expectation</code> for mocking the <code>save</code> method","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","Create a new mock object with no expectations.","","","","","","","","","","","","","","","Holds the stuff that is independent of the output type","","Expectation type for methods that return a <code>&#39;static</code> type. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Add this expectation to a <code>Sequence</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Validate this expectation’s matcher.","Forbid this expectation from ever being called.","Forbid this expectation from ever being called.","Create a new, default, <code>Expectation</code>","Expect this expectation to be called exactly once.  …","Return a constant value from the <code>Expectation</code>","Single-threaded version of <code>return_const</code>.  This is useful …","Supply an <code>FnOnce</code> closure that will provide the return …","Single-threaded version of <code>return_once</code>.  This is useful for","Supply a closure that will provide the return value for …","Single-threaded version of <code>returning</code>. Can be used when the …","","","","Expect this expectation to be called any number of times …","Restrict the number of times that that this method may be …","","","","","","","","","","","","","","","","","","","","","Set matching criteria for this Expectation.","","Set a matching function for this Expectation.","","Single-threaded version of <code>withf</code>. Can be used when the …","","Holds the stuff that is independent of the output type","","Expectation type for methods that return a <code>&#39;static</code> type. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Add this expectation to a <code>Sequence</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","Validate this expectation’s matcher.","Forbid this expectation from ever being called.","Forbid this expectation from ever being called.","Create a new, default, <code>Expectation</code>","Expect this expectation to be called exactly once.  …","Return a constant value from the <code>Expectation</code>","Single-threaded version of <code>return_const</code>.  This is useful …","Supply an <code>FnOnce</code> closure that will provide the return …","Single-threaded version of <code>return_once</code>.  This is useful for","Supply a closure that will provide the return value for …","Single-threaded version of <code>returning</code>. Can be used when the …","","","","Expect this expectation to be called any number of times …","Restrict the number of times that that this method may be …","","","","","","","","","","","","","","","","","","","","","Set matching criteria for this Expectation.","","Set a matching function for this Expectation.","","Single-threaded version of <code>withf</code>. Can be used when the …","","Username must be grater than 0 and less than equal 255.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","User ID","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","Username","","","","the partners if there is no partners, this value will be …","","","","","","","","","","","","","","User ID consists of an ID only that is UUID","","","","","","","","","","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","","","","","","The argument is user ID that must be UUID. If you don’t …","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","create a new user","","","Add a new partner The partner is added to the user. The …","","","update a user’s name","create a new user","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","Remove a new partner The partner is removed from the user. …","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,12,12,12,12,12,12,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,0,0,0,0,0,0,0,19,0,0,19,21,19,21,19,21,19,21,19,19,24,19,21,19,19,21,19,21,19,21,19,21,19,21,19,21,19,24,19,21,19,21,19,21,19,21,19,21,0,0,29,0,28,0,28,29,29,0,28,28,28,28,29,0,28,29,28,29,27,22,28,29,27,22,27,28,22,28,29,27,22,27,29,28,29,27,22,27,22,28,29,27,22,28,29,27,22,27,22,28,29,27,22,28,29,27,22,27,22,27,29,27,22,27,22,22,22,22,22,22,22,22,22,22,27,27,27,22,27,29,28,29,27,22,28,29,27,22,28,29,27,22,28,29,27,22,27,27,22,27,22,27,22,43,0,42,0,42,43,43,0,42,42,42,42,43,0,42,43,42,43,41,23,42,43,41,23,41,42,23,42,43,41,23,41,43,42,43,41,23,41,23,42,43,41,23,42,43,41,23,41,23,42,43,41,23,42,43,41,23,41,23,41,43,41,23,41,23,23,23,23,23,23,23,23,23,23,41,41,41,23,41,43,42,43,41,23,42,43,41,23,42,43,41,23,42,43,41,23,41,41,23,41,23,41,23,0,0,4,4,44,4,44,4,44,4,44,4,4,4,44,4,4,4,44,44,44,4,44,4,44,4,4,4,44,4,44,4,44,4,44,4,44,4,44,4,44,4,4,4,4,4,44,4,44,44,4,44,4,44,4,44,4,0,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,0,0,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,0,0,0,48,48,48,48,48,48,48,48,48,48,48,48,48,0,48,48,48,48,48,0,50,50,50,50],"f":"```````{ce{}{}}0{c{{d{b}}}f}`{cc{}}{hb}`3{{{j{c}}}{{j{l}}}{}}{{{n{c}}}{{n{l}}}{}}{{{A`{c}}}{{A`{l}}}{}}6``{{bc}dAb}{c{{d{e}}}{}{}}0{cAd{}}{cAf{}}`````````::{{AhAj}Al}09{AnAh}<876<{Ah{{Bb{B`}}}}{cBd{}}6654``````````>>>>{BfBh}{BjBh}{{}Bf}{{}Bj}{BfBl}{BfBn}{{C`Cb}{{d{{Bb{h}}Ah}}}}{{BfCb}{{d{{Bb{h}}Ah}}}}`{{BfAj}{{d{BhCd}}}}{cc{}}0{ce{}{}}0{{{j{c}}}{{j{l}}}{}}0{{{n{c}}}{{n{l}}}{}}0{{{A`{c}}}{{A`{l}}}{}}033;{{C`h}{{d{BhAh}}}}{{Bfh}{{d{BhAh}}}}`{c{{d{e}}}{}{}}000{cAd{}}0{cAf{}}0``````````````````88888888{{CfAf}Bh}{{ChCb}{{d{{d{{Bb{h}}Ah}}Af}}}}`{{}Ch}{{}Cj}{{}Cf}{{}Bl}{CfBh}{{CjAj}Al}{cc{}}000{{CfCl}Cf}{{BlCl}Bl}{ce{}{}}000{{{j{c}}}{{j{l}}}{}}000{{{n{c}}}{{n{l}}}{}}0{{{A`{c}}}{{A`{l}}}{}}0003333{CfCn}{BlCn}`{{CjCb}Cn}{{CfCb}Cn}{{BlCb}Cn}={BlBl}?0{{Blc}Bl{D`{Db{{d{{Bb{h}}Ah}}}}Dd}}{{Blc}Bl{D`{Db{{d{{Bb{h}}Ah}}}}}}{{Blc}Bl{{Dh{Cb}{{Df{{d{{Bb{h}}Ah}}}}}}Dd}}{{Blc}Bl{{Dh{Cb}{{Df{{d{{Bb{h}}Ah}}}}}}}}{{Blc}Bl{{Dj{Cb}{{Df{{d{{Bb{h}}Ah}}}}}}Dd}}{{Blc}Bl{{Dj{Cb}{{Df{{d{{Bb{h}}Ah}}}}}}}}`{CfBh}`{{Cfc}Bh{{Db{Dl}}}}{{Blc}Bl{{Db{Dl}}}}`{cBd{}}{c{{d{e}}}{}{}}0000000{cAd{}}000{cAf{}}000{{CfAf}Bh}{{Cfc}Bh{{Dn{Cb}}Dd}}{{Blc}Bl{{Dn{Cb}}Dd}}{{Cfc}Bh{{E`{Cb}{{Df{Cn}}}}Dd}}{{Blc}Bl{{E`{Cb}{{Df{Cn}}}}Dd}}{{Cfc}Bh{{E`{Cb}{{Df{Cn}}}}}}{{Blc}Bl{{E`{Cb}{{Df{Cn}}}}}}````````````````{ce{}{}}0000000{{EbAf}Bh}{{Edh}{{d{{d{BhAh}}Af}}}}`{{}Ed}{{}Ef}{{}Eb}{{}Bn}{EbBh}{{EfAj}Al}{cc{}}000{{EbCl}Eb}{{BnCl}Bn};;;;{{{j{c}}}{{j{l}}}{}}000{{{n{c}}}{{n{l}}}{}}0{{{A`{c}}}{{A`{l}}}{}}000>>>>{EbCn}{BnCn}`{{Efh}Cn}{{Ebh}Cn}{{Bnh}Cn}<{BnBn}>0{{Bnc}Bn{D`{Db{{d{BhAh}}}}Dd}}{{Bnc}Bn{D`{Db{{d{BhAh}}}}}}{{Bnc}Bn{{Dh{h}{{Df{{d{BhAh}}}}}}Dd}}{{Bnc}Bn{{Dh{h}{{Df{{d{BhAh}}}}}}}}{{Bnc}Bn{{Dj{h}{{Df{{d{BhAh}}}}}}Dd}}{{Bnc}Bn{{Dj{h}{{Df{{d{BhAh}}}}}}}}`{EbBh}`{{Ebc}Bh{{Db{Dl}}}}{{Bnc}Bn{{Db{Dl}}}}`{cBd{}}{c{{d{e}}}{}{}}0000000{cAd{}}000{cAf{}}000{{EbAf}Bh}{{Ebc}Bh{{Dn{h}}Dd}}{{Bnc}Bn{{Dn{h}}Dd}}{{Ebc}Bh{{E`{h}{{Df{Cn}}}}Dd}}{{Bnc}Bn{{E`{h}{{Df{Cn}}}}Dd}}{{Ebc}Bh{{E`{h}{{Df{Cn}}}}}}{{Bnc}Bn{{E`{h}{{Df{Cn}}}}}}``{{hCb}Bh}{ce{}{}}000{hh}{EhEh}{{ce}Bh{}{}}0{hAf}`{{hh}Cn}{{EhEh}Cn}{{ce}Cn{}{}}00000{{hAj}Al}{{EhAj}Al}{cc{}}0{hCb}`;;{{{j{c}}}{{j{l}}}{}}0{{{n{c}}}{{n{l}}}{}}0{{{A`{c}}}{{A`{l}}}{}}0>>:{EhAf}``{{CbEhAf{Bb{{Ej{Cb}}}}}h}{h{{Ej{Cb}}}}`{{hCb}Bh}{ce{}{}}0{c{{d{e}}}{}{}}{Af{{d{EhAh}}}}111{cAd{}}0{cAf{}}0{{hEh}h}`55{CbCb}{{ce}Bh{}{}}{{CbCb}Cn}{{ce}Cn{}{}}00{{CbAj}Al}{cc{}}{{}Cb}{{Cbc}BhEl}{CbAf}`>{{{j{c}}}{{j{l}}}{}}{{{n{c}}}{{n{l}}}{}}{{{A`{c}}}{{A`{l}}}{}}{ce{}{}}0{Af{{d{CbAh}}}}{c{{d{e}}}{}{}}0{cAd{}}{cAf{}}``44`{{}En}{{EnCb}{{d{{Bb{h}}Ah}}}}{{EnAj}Al}>7:987{{Enh}{{d{BhAh}}}}`6654```{{{F`{c}}AfAf}{{d{bAh}}}C`}9900{cc{}}:=<;:{c{{F`{c}}}{}}2{{AfAf}{{d{{Fb{CbCb}}Ah}}}}::98``{{FdAfAf}{{d{bAh}}}}000","c":[],"p":[[5,"UserDto",6],[6,"Result",438],[10,"Deserializer",439],[5,"User",308],[5,"Box",440],[10,"Any",441],[5,"Arc",442],[5,"Rc",443],[10,"Serializer",444],[5,"TypeId",441],[1,"str"],[6,"UsersError",27],[5,"Formatter",445],[8,"Result",445],[6,"Error",446],[10,"Error",447],[6,"Option",448],[5,"String",449],[5,"MockUserRepository",56],[1,"unit"],[5,"MockUserRepository_UserRepository",56],[5,"Expectation",102],[5,"Expectation",205],[10,"UserRepository",56],[5,"UserId",365],[5,"Error",445],[5,"Common",102],[6,"Rfunc",102],[6,"Matcher",102],[5,"Sequence",450],[1,"bool"],[10,"Clone",451],[10,"Into",452],[10,"Send",453],[17,"Output"],[10,"FnOnce",454],[10,"FnMut",454],[5,"TimesRange",450],[10,"Predicate",455],[10,"Fn",454],[5,"Common",205],[6,"Rfunc",205],[6,"Matcher",205],[5,"Username",308],[5,"Vec",456],[10,"Hasher",457],[5,"UserRepositoryConcrete",392],[5,"CreateUserUseCaseInteractor",413],[1,"tuple"],[10,"UserUseCases",433]],"b":[[37,"impl-Debug-for-UsersError"],[38,"impl-Display-for-UsersError"]]}],\
["utils",{"doc":"","t":"CCCCHCHH","n":["infrastructure","settings","db","dynamo_db_client","dynamodb_client","settings","dynamo_endpoint","table_name"],"q":[[0,"utils"],[2,"utils::infrastructure"],[3,"utils::infrastructure::db"],[4,"utils::infrastructure::db::dynamo_db_client"],[5,"utils::settings"],[6,"utils::settings::settings"],[8,"aws_sdk_dynamodb::client"]],"d":["","","","","","read environment values the following value are constant …","read a table name from the environment value This is used …","read a table name from the environment value"],"i":[0,0,0,0,0,0,0,0],"f":"````{{}b}`{{}d}0","c":[],"p":[[5,"Client",8],[1,"str"]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
