searchState.loadedDescShard("travel", 0, "To-do DTO\nTravel DTO\nTo-do DTO\nTo-do list group DTO\nReturns the argument unchanged.\nConvert the To-do list group into DTO\nConvert the To-do struct into DTO.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTravel DTO\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ncreate new travel\nReturns the argument unchanged.\nget travel by id\nCalls <code>U::from(self)</code>.\nThe repository trait of the to-do\nTravel Repository\nValidate that all current expectations for all methods have\nValidate that all current expectations for all methods have\nCreate an <code>Expectation</code> for mocking the <code>find_todo_by_id</code> …\nCreate an <code>Expectation</code> for mocking the …\nCreate an <code>Expectation</code> for mocking the <code>list_todo</code> method\nCreate an <code>Expectation</code> for mocking the <code>list_todo_list_group</code> …\nCreate an <code>Expectation</code> for mocking the <code>save_todo</code> method\nCreate an <code>Expectation</code> for mocking the <code>save_todo_list_group</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new mock object with no expectations.\nHolds the stuff that is independent of the output type\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValidate this expectation’s matcher.\nForbid this expectation from ever being called.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nExpect this expectation to be called any number of times …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nHolds the stuff that is independent of the output type\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValidate this expectation’s matcher.\nForbid this expectation from ever being called.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nExpect this expectation to be called any number of times …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nHolds the stuff that is independent of the output type\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValidate this expectation’s matcher.\nForbid this expectation from ever being called.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nExpect this expectation to be called any number of times …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nHolds the stuff that is independent of the output type\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValidate this expectation’s matcher.\nForbid this expectation from ever being called.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nExpect this expectation to be called any number of times …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nHolds the stuff that is independent of the output type\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValidate this expectation’s matcher.\nForbid this expectation from ever being called.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nExpect this expectation to be called any number of times …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nHolds the stuff that is independent of the output type\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValidate this expectation’s matcher.\nForbid this expectation from ever being called.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nExpect this expectation to be called any number of times …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nValidate that all current expectations for all methods have\nValidate that all current expectations for all methods have\nCreate an <code>Expectation</code> for mocking the <code>find_by_id</code> method\nCreate an <code>Expectation</code> for mocking the <code>is_users_travel</code> …\nCreate an <code>Expectation</code> for mocking the <code>save</code> method\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new mock object with no expectations.\nHolds the stuff that is independent of the output type\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValidate this expectation’s matcher.\nForbid this expectation from ever being called.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nExpect this expectation to be called any number of times …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nHolds the stuff that is independent of the output type\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValidate this expectation’s matcher.\nForbid this expectation from ever being called.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nExpect this expectation to be called any number of times …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nHolds the stuff that is independent of the output type\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValidate this expectation’s matcher.\nForbid this expectation from ever being called.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nExpect this expectation to be called any number of times …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nto do struct\nThis is the collection of the to do list\nThis value must be grater than 0 and less than equal 500.\nThis is false by default.\ndue date. this is time stamp\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe done is false by default.\nThis value must be grater than 0 and less than equal 200.\nupdate the summary and the description\nThe summary length must be grater than 0 and less than 200.\nadd a new to do to this collection\nReturns the argument unchanged.\nthis to-do group name\nCalls <code>U::from(self)</code>.\nremove a to-do from this collection\nThe collection of the to-do rest\nto-do group ID\ntravel ID\ntime offset from the UTC\nupdate the to-do list group by creating a new struct\nto-do ID This is auto increment number\ntodo list group ID This is auto increment number\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ntravel struct\nadd a traveler into this travel\nend datetime of this travel\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ninvolve a user into this travel\nSame as the travelers, this is also HashSet\nCheck if the user provided as an argument is related to …\nCheck it the user is traveler or not.\nthe length must be grater than 0 and less than equal 255.\nthe travelers and the involved users can be None.\npreclude an involved user from this travel\nremove a traveler from this travel😢\nstart datetime of this travel\nthe Travel ID\nTravelers are HashSet since the value cannot be …\nTravel ID\nuser’s ID This is reference only,\ntravel ID\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe argument is user ID that must be UUID. If you don’t …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis is implementation of the to do repository.\nTravel Repository\nConvert the DynamoDB result hashmap into Option string\nConvert the item (HashMap) into the To do struct\nConvert the item into the To-do List Group\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nget the auto-increment like value. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nthis function is for save travel. Returns the put item …\nGetting id service Return a number that latest ID + 1\nupdate the counter saving the latest ID\nReturns the argument unchanged.\nThis function gets the latest ID The return ID has already …\nGet the latest + 1 to do list ID if there is no data in …\nGet the latest + 1 to do list ID if there is no data in …\nCalls <code>U::from(self)</code>.\nTravel use cases\ncheck if the user belong to a travel\ncreate a new to-do\ncreate a new to-do group The empty to-do is also created\nReturns the argument unchanged.\nget a to-do\nget a to-do list group\nCalls <code>U::from(self)</code>.\ntoggle done section\nget a to-do list of the travel\nupdate a to-do\nupdate a to-do list group\nCreate a new travel The request user is set as one of the …\nReturns the argument unchanged.\nget a travel\nCalls <code>U::from(self)</code>.\nOnly travelers can modify the travel information. When the …")