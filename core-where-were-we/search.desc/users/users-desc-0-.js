searchState.loadedDescShard("users", 0, "User DTO\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ncreate interface\nuser’s model\nThe User ID\nValidate that all current expectations for all methods have\nValidate that all current expectations for all methods have\nCreate an <code>Expectation</code> for mocking the <code>find_by_id</code> method\nCreate an <code>Expectation</code> for mocking the <code>save</code> method\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new mock object with no expectations.\nHolds the stuff that is independent of the output type\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValidate this expectation’s matcher.\nForbid this expectation from ever being called.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nExpect this expectation to be called any number of times …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nHolds the stuff that is independent of the output type\nExpectation type for methods that return a <code>&#39;static</code> type. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdd this expectation to a <code>Sequence</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nValidate this expectation’s matcher.\nForbid this expectation from ever being called.\nForbid this expectation from ever being called.\nCreate a new, default, <code>Expectation</code>\nExpect this expectation to be called exactly once.  …\nReturn a constant value from the <code>Expectation</code>\nSingle-threaded version of <code>return_const</code>.  This is useful …\nSupply an <code>FnOnce</code> closure that will provide the return …\nSingle-threaded version of <code>return_once</code>.  This is useful for\nSupply a closure that will provide the return value for …\nSingle-threaded version of <code>returning</code>. Can be used when the …\nExpect this expectation to be called any number of times …\nRestrict the number of times that that this method may be …\nSet matching criteria for this Expectation.\nSet a matching function for this Expectation.\nSingle-threaded version of <code>withf</code>. Can be used when the …\nUsername must be grater than 0 and less than equal 255.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUser ID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUsername\nthe partners if there is no partners, this value will be …\nUser ID consists of an ID only that is UUID\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe argument is user ID that must be UUID. If you don’t …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ncreate a new user\nAdd a new partner The partner is added to the user. The …\nupdate a user’s name\ncreate a new user\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRemove a new partner The partner is removed from the user. …")